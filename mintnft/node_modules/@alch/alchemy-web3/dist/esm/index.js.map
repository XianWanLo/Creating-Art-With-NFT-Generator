{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import Web3 from \"web3\";\nimport { Log, LogsOptions, Transaction } from \"web3-core\";\nimport { Subscription } from \"web3-core-subscriptions\";\nimport { BlockHeader, Eth, Syncing } from \"web3-eth\";\nimport { hexToNumberString, toHex } from \"web3-utils\";\nimport { AlchemyWeb3Config, FullConfig, Provider, Web3Callback } from \"./types\";\nimport { JsonRpcSenders } from \"./util/jsonRpc\";\nimport { callWhenDone } from \"./util/promises\";\nimport { makeAlchemyContext } from \"./web3-adapter/alchemyContext\";\n\nconst DEFAULT_MAX_RETRIES = 3;\nconst DEFAULT_RETRY_INTERVAL = 1000;\nconst DEFAULT_RETRY_JITTER = 250;\n\nexport interface AlchemyWeb3 extends Web3 {\n  alchemy: AlchemyMethods;\n  eth: AlchemyEth;\n  setWriteProvider(provider: Provider | null | undefined): void;\n}\n\nexport interface AlchemyMethods {\n  getTokenAllowance(\n    params: TokenAllowanceParams,\n    callback?: Web3Callback<TokenAllowanceResponse>,\n  ): Promise<TokenAllowanceResponse>;\n  getTokenBalances(\n    address: string,\n    contractAddresses: string[],\n    callback?: Web3Callback<TokenBalancesResponse>,\n  ): Promise<TokenBalancesResponse>;\n  getTokenMetadata(\n    address: string,\n    callback?: Web3Callback<TokenMetadataResponse>,\n  ): Promise<TokenMetadataResponse>;\n  getAssetTransfers(\n    params: AssetTransfersParams,\n    callback?: Web3Callback<AssetTransfersResponse>,\n  ): Promise<AssetTransfersResponse>;\n}\n\nexport interface TokenAllowanceParams {\n  contract: string;\n  owner: string;\n  spender: string;\n}\n\nexport type TokenAllowanceResponse = string;\n\nexport interface TokenBalancesResponse {\n  address: string;\n  tokenBalances: TokenBalance[];\n}\n\nexport type TokenBalance = TokenBalanceSuccess | TokenBalanceFailure;\n\nexport interface TokenBalanceSuccess {\n  address: string;\n  tokenBalance: string;\n  error: null;\n}\n\nexport interface TokenBalanceFailure {\n  address: string;\n  tokenBalance: null;\n  error: string;\n}\n\nexport interface TokenMetadataResponse {\n  decimals: number | null;\n  logo: string | null;\n  name: string | null;\n  symbol: string | null;\n}\n\nexport interface AssetTransfersParams {\n  fromBlock?: string;\n  toBlock?: string;\n  fromAddress?: string;\n  toAddress?: string;\n  contractAddresses?: string[];\n  excludeZeroValue?: boolean;\n  maxCount?: number;\n  category?: AssetTransfersCategory[];\n  pageKey?: string;\n}\n\nexport enum AssetTransfersCategory {\n  EXTERNAL = \"external\",\n  INTERNAL = \"internal\",\n  TOKEN = \"token\",\n}\n\nexport interface AssetTransfersResponse {\n  transfers: AssetTransfersResult[];\n  pageKey?: string;\n}\n\nexport interface AssetTransfersResult {\n  category: AssetTransfersCategory;\n  blockNum: string;\n  from: string;\n  to: string | null;\n  value: number | null;\n  erc721TokenId: string | null;\n  asset: string | null;\n  hash: string;\n  rawContract: RawContract;\n}\n\nexport interface RawContract {\n  value: string | null;\n  address: string | null;\n  decimal: string | null;\n}\n\n/**\n * Same as Eth, but with `subscribe` allowing more types.\n */\nexport interface AlchemyEth extends Eth {\n  subscribe(\n    type: \"logs\",\n    options?: LogsOptions,\n    callback?: (error: Error, log: Log) => void,\n  ): Subscription<Log>;\n  subscribe(\n    type: \"syncing\",\n    callback?: (error: Error, result: Syncing) => void,\n  ): Subscription<Syncing>;\n  subscribe(\n    type: \"newBlockHeaders\",\n    callback?: (error: Error, blockHeader: BlockHeader) => void,\n  ): Subscription<BlockHeader>;\n  subscribe(\n    type: \"pendingTransactions\",\n    callback?: (error: Error, transactionHash: string) => void,\n  ): Subscription<string>;\n  subscribe(\n    type: \"alchemy_fullPendingTransactions\",\n    callback?: (error: Error, transaction: Transaction) => void,\n  ): Subscription<Transaction>;\n  subscribe(\n    type:\n      | \"pendingTransactions\"\n      | \"logs\"\n      | \"syncing\"\n      | \"newBlockHeaders\"\n      | \"alchemy_fullPendingTransactions\",\n    options?: null | LogsOptions,\n    callback?: (\n      error: Error,\n      item: Log | Syncing | BlockHeader | string | Transaction,\n    ) => void,\n  ): Subscription<Log | BlockHeader | Syncing | string>;\n}\n\ninterface EthereumWindow extends Window {\n  ethereum?: any;\n}\n\ndeclare const window: EthereumWindow;\n\nexport function createAlchemyWeb3(\n  alchemyUrl: string,\n  config?: AlchemyWeb3Config,\n): AlchemyWeb3 {\n  const fullConfig = fillInConfigDefaults(config);\n  const { provider, senders, setWriteProvider } = makeAlchemyContext(\n    alchemyUrl,\n    fullConfig,\n  );\n  const alchemyWeb3 = new Web3(provider) as AlchemyWeb3;\n  alchemyWeb3.setProvider = () => {\n    throw new Error(\n      \"setProvider is not supported in Alchemy Web3. To change the provider used for writes, use setWriteProvider() instead.\",\n    );\n  };\n  alchemyWeb3.setWriteProvider = setWriteProvider;\n  alchemyWeb3.alchemy = {\n    getTokenAllowance: (params: TokenAllowanceParams, callback) =>\n      callAlchemyMethod({\n        senders,\n        callback,\n        method: \"alchemy_getTokenAllowance\",\n        params: [params],\n      }),\n    getTokenBalances: (address, contractAddresses, callback) =>\n      callAlchemyMethod({\n        senders,\n        callback,\n        method: \"alchemy_getTokenBalances\",\n        params: [address, contractAddresses],\n        processResponse: processTokenBalanceResponse,\n      }),\n    getTokenMetadata: (address, callback) =>\n      callAlchemyMethod({\n        senders,\n        callback,\n        params: [address],\n        method: \"alchemy_getTokenMetadata\",\n      }),\n    getAssetTransfers: (params: AssetTransfersParams, callback) =>\n      callAlchemyMethod({\n        senders,\n        callback,\n        params: [\n          {\n            ...params,\n            maxCount:\n              params.maxCount != null ? toHex(params.maxCount) : undefined,\n          },\n        ],\n        method: \"alchemy_getAssetTransfers\",\n      }),\n  };\n  patchSubscriptions(alchemyWeb3);\n  return alchemyWeb3;\n}\n\nfunction fillInConfigDefaults({\n  writeProvider = getWindowProvider(),\n  maxRetries = DEFAULT_MAX_RETRIES,\n  retryInterval = DEFAULT_RETRY_INTERVAL,\n  retryJitter = DEFAULT_RETRY_JITTER,\n}: AlchemyWeb3Config = {}): FullConfig {\n  return { writeProvider, maxRetries, retryInterval, retryJitter };\n}\n\nfunction getWindowProvider(): Provider | null {\n  return typeof window !== \"undefined\" ? window.ethereum : null;\n}\n\ninterface CallAlchemyMethodParams<T> {\n  senders: JsonRpcSenders;\n  method: string;\n  params: any[];\n  callback?: Web3Callback<T>;\n  processResponse?(response: any): T;\n}\n\nfunction callAlchemyMethod<T>({\n  senders,\n  method,\n  params,\n  callback = noop,\n  processResponse = identity,\n}: CallAlchemyMethodParams<T>): Promise<T> {\n  const promise = (async () => {\n    const result = await senders.send(method, params);\n    return processResponse(result);\n  })();\n  callWhenDone(promise, callback);\n  return promise;\n}\n\nfunction processTokenBalanceResponse(\n  rawResponse: TokenBalancesResponse,\n): TokenBalancesResponse {\n  // Convert token balance fields from hex-string to decimal-string.\n  const fixedTokenBalances = rawResponse.tokenBalances.map((balance) =>\n    balance.tokenBalance != null\n      ? { ...balance, tokenBalance: hexToNumberString(balance.tokenBalance) }\n      : balance,\n  );\n  return { ...rawResponse, tokenBalances: fixedTokenBalances };\n}\n\n/**\n * Updates Web3's internal subscription architecture to also handle Alchemy\n * specific subscriptions.\n */\nfunction patchSubscriptions(web3: Web3): void {\n  const { eth } = web3;\n  const oldSubscribe = eth.subscribe.bind(eth);\n  eth.subscribe = ((type: string, ...rest: any[]) => {\n    if (\n      type === \"alchemy_fullPendingTransactions\" ||\n      type === \"alchemy_newFullPendingTransactions\"\n    ) {\n      return suppressNoSubscriptionExistsWarning(() =>\n        oldSubscribe(\"alchemy_newFullPendingTransactions\" as any, ...rest),\n      );\n    }\n    return oldSubscribe(type as any, ...rest);\n  }) as any;\n}\n\n/**\n * VERY hacky wrapper to suppress a spurious warning when subscribing to an\n * Alchemy subscription that isn't built into Web3.\n */\nfunction suppressNoSubscriptionExistsWarning<T>(f: () => T): T {\n  const oldConsoleWarn = console.warn;\n  console.warn = (...args: unknown[]) => {\n    if (\n      typeof args[0] === \"string\" &&\n      args[0].includes(\" doesn't exist. Subscribing anyway.\")\n    ) {\n      return;\n    }\n    return oldConsoleWarn.apply(console, args);\n  };\n  try {\n    return f();\n  } finally {\n    console.warn = oldConsoleWarn;\n  }\n}\n\nfunction noop(): void {\n  // Nothing.\n}\n\nfunction identity<T>(x: T): T {\n  return x;\n}\n"]}
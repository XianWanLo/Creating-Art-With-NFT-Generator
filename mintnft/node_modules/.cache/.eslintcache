[{"C:\\Users\\x7491\\Creating-Art-With-NFT-Generator\\mintnft\\src\\index.js":"1","C:\\Users\\x7491\\Creating-Art-With-NFT-Generator\\mintnft\\src\\App.js":"2","C:\\Users\\x7491\\Creating-Art-With-NFT-Generator\\mintnft\\src\\reportWebVitals.js":"3","C:\\Users\\x7491\\Creating-Art-With-NFT-Generator\\mintnft\\src\\Minter.js":"4","C:\\Users\\x7491\\Creating-Art-With-NFT-Generator\\mintnft\\src\\utils\\interact.js":"5","C:\\Users\\x7491\\Creating-Art-With-NFT-Generator\\mintnft\\src\\utils\\pinata.js":"6","C:\\Users\\x7491\\Creating-Art-With-NFT-Generator\\mintnft\\src\\Displayer.js":"7"},{"size":517,"mtime":1658636707138,"results":"8","hashOfConfig":"9"},{"size":450,"mtime":1658754489196,"results":"10","hashOfConfig":"9"},{"size":375,"mtime":1658636707146,"results":"11","hashOfConfig":"9"},{"size":3078,"mtime":1658777505604,"results":"12","hashOfConfig":"9"},{"size":4231,"mtime":1658777185536,"results":"13","hashOfConfig":"9"},{"size":1837,"mtime":1658754114756,"results":"14","hashOfConfig":"9"},{"size":4465,"mtime":1658779029773,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"m8mx0d",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\x7491\\Creating-Art-With-NFT-Generator\\mintnft\\src\\index.js",[],["33","34"],"C:\\Users\\x7491\\Creating-Art-With-NFT-Generator\\mintnft\\src\\App.js",[],"C:\\Users\\x7491\\Creating-Art-With-NFT-Generator\\mintnft\\src\\reportWebVitals.js",[],"C:\\Users\\x7491\\Creating-Art-With-NFT-Generator\\mintnft\\src\\Minter.js",["35","36","37"],"import { useEffect, useState, useRef } from \"react\";\r\nimport { connectWallet, getCurrentWalletConnected, mintNFT } from \"./utils/interact.js\";\r\nimport { useNavigate} from \"react-router-dom\";\r\n\r\nconst Minter = (props) => {\r\n  const navigate = useNavigate();\r\n\r\n  //State variables\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [image, setImage] = useState(\"\");\r\n  const imageRef = useRef();\r\n\r\n\r\n  function addWalletListener() {\r\n  if (window.ethereum) {\r\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n      if (accounts.length > 0) {\r\n        setWallet(accounts[0]);\r\n        setStatus(\" Write a message in the text-field above.\");\r\n      } else {\r\n        setWallet(\"\");\r\n        setStatus(\" Connect to Metamask.\");\r\n      }\r\n    });\r\n  } else {\r\n    setStatus(\r\n      <p>\r\n        {\" \"}\r\n        🦊{\" \"}\r\n        <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n          You must install Metamask, a virtual Ethereum wallet, in your\r\n          browser.\r\n        </a>\r\n      </p>\r\n    );\r\n  }\r\n}\r\n \r\n  useEffect(async () => {\r\n      const {address, status} = await getCurrentWalletConnected();\r\n      setWallet(address)\r\n      setStatus(status);\r\n      addWalletListener();\r\n  }, []);\r\n\r\n  const connectWalletPressed = async () => {\r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  const onMintPressed = async () => {\r\n\r\n  const { success, NFTname, NFTurl, NFTdescription, txHash } = await mintNFT(image, name, description);\r\n  \r\n  if (success) {\r\n      navigate('/display', {\r\n        state: {\r\n          NFTname: NFTname,\r\n          NFTurl: NFTurl,\r\n          NFTdescription: NFTdescription,\r\n          txURL: \"https://goerli.etherscan.io/tx/\" + txHash, \r\n        }\r\n      });\r\n  };\r\n  \r\n\r\n  };\r\n\r\n  return (\r\n    <div className=\"Minter\">\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <br></br>\r\n      <h1 id=\"title\"> NFT Minter </h1>\r\n      <form>\r\n        <h2>Upload Image: </h2>\r\n        <input type=\"file\" onChange={(event) => setImage(event.target.files[0])} required />\r\n        <h2>The Name of the NFT: </h2>\r\n        <input\r\n          type=\"text\"\r\n          onChange={(event) => setName(event.target.value)}\r\n        />\r\n        <h2>The Description of the NFT: </h2>\r\n        <input\r\n          type=\"text\"\r\n          onChange={(event) => setDescription(event.target.value)}\r\n        />\r\n      </form>\r\n      <button id=\"mintButton\" onClick={onMintPressed}>\r\n        Mint NFT\r\n      </button>\r\n      <p id=\"status\">\r\n        {status}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Minter;\r\n","C:\\Users\\x7491\\Creating-Art-With-NFT-Generator\\mintnft\\src\\utils\\interact.js",["38","39","40"],"import {pinJSONToIPFS, pinFileToIPFS} from './pinata.js'\r\n\r\n//set up Alchemy Web3 endpoint\r\nrequire('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nconst contractABI = require('../contract-abi.json')\r\nconst contractAddress = \"0xA10A93F2ec836aF72A720b1F137Afcfe940eA11E\";\r\n\r\n//receive data from fronted\r\nexport const mintNFT = async(image, name, description) => {\r\n //error handling\r\n// if (url.trim() == \"\" || (name.trim() == \"\" || description.trim() == \"\")) {\r\n//        return {\r\n//            success: false,\r\n//            status: \"❗Please make sure all fields are completed before minting.\",\r\n//        }\r\n//  }\r\n  //1. image to IPFS\r\n  const pinataResponse1 = await pinFileToIPFS(image)\r\n  if (!pinataResponse1.success) {\r\n    return {\r\n      success: false,\r\n      status: \"😢 Something went wrong while uploading your image.\",\r\n    }\r\n  }\r\n\r\n  //2. metadata to IPFS\r\n  const metadata = new Object();\r\n  metadata.name = name;\r\n  metadata.url = pinataResponse1.pinataUrl;;\r\n  metadata.description = description;\r\n\r\n  const pinataResponse2 = await pinJSONToIPFS(metadata);\r\n  if (!pinataResponse2.success) {\r\n      return {\r\n          success: false,\r\n          status: \"😢 Something went wrong while uploading your tokenURI.\",\r\n      }\r\n  }\r\n  const tokenURI = pinataResponse2.pinataUrl;\r\n\r\n  //load smart contract\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n  //set up Ethereum transaction\r\n  const transactionParameters = {\r\n          to: contractAddress,\r\n          from: window.ethereum.selectedAddress,\r\n          'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI()//make call to NFT smart contract\r\n  };\r\n\r\n//sign the transaction via Metamask\r\n try {\r\n    const txHash = await window.ethereum\r\n        .request({\r\n            method: 'eth_sendTransaction',\r\n            params: [transactionParameters],\r\n        });\r\n\r\n\r\n    return {\r\n        success: true,\r\n        NFTname: metadata.name,\r\n        NFTurl: metadata.url,\r\n        NFTdescription: metadata.description,\r\n        txHash: txHash,\r\n    }\r\n } catch (error) {\r\n    return {\r\n        success: false,\r\n        NFTname: \"None\",\r\n        NFTurl: \"None\",\r\n        NFTdescription: \"None\",\r\n        txHash: \"None\",\r\n    }\r\n }\r\n\r\n}\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"Write a message in the text-field above.\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \" \",\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"Please Connect to Metamask\",\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};","C:\\Users\\x7491\\Creating-Art-With-NFT-Generator\\mintnft\\src\\utils\\pinata.js",[],"C:\\Users\\x7491\\Creating-Art-With-NFT-Generator\\mintnft\\src\\Displayer.js",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":14,"column":9,"nodeType":"47","messageId":"48","endLine":14,"endColumn":17},{"ruleId":"49","severity":1,"message":"50","line":33,"column":9,"nodeType":"51","endLine":33,"endColumn":71},{"ruleId":"52","severity":1,"message":"53","line":42,"column":13,"nodeType":"54","endLine":47,"endColumn":4},{"ruleId":"55","severity":1,"message":"56","line":31,"column":20,"nodeType":"57","messageId":"58","endLine":31,"endColumn":32},{"ruleId":"49","severity":1,"message":"50","line":108,"column":13,"nodeType":"51","endLine":108,"endColumn":75},{"ruleId":"49","severity":1,"message":"50","line":150,"column":13,"nodeType":"51","endLine":150,"endColumn":75},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'imageRef' is assigned a value but never used.","Identifier","unusedVar","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-new-object","The object literal notation {} is preferrable.","NewExpression","preferLiteral","no-global-assign","no-unsafe-negation"]
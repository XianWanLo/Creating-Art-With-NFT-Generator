{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/x7491/Creating-Art-With-NFT-Generator/mintnft/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/x7491/Creating-Art-With-NFT-Generator/mintnft/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";require('dotenv').config();var key=process.env.REACT_APP_PINATA_KEY;var secret=process.env.REACT_APP_PINATA_SECRET;var axios=require('axios');//upload file to ipfs\nexport var pinFileToIPFS=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(imageFile){var url,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:url=\"https://api.pinata.cloud/pinning/pinFileToIPFS\";data=new FormData();data.append(\"file\",imageFile);return _context.abrupt(\"return\",axios//        .post(url, file, {\n//            headers: {\n//                pinata_api_key: key,\n//                pinata_secret_api_key: secret,\n//            }\n//        })\n.post(url,data,{maxBodyLength:'Infinity',headers:{'Content-Type':\"multipart/form-data; boundary=\".concat(data._boundary),pinata_api_key:key,pinata_secret_api_key:secret}}).then(function(response){return{success:true,pinataUrl:\"https://gateway.pinata.cloud/ipfs/\"+response.data.IpfsHash};}).catch(function(error){console.log(error);return{success:false,message:error.message};}));case 4:case\"end\":return _context.stop();}}},_callee);}));return function pinFileToIPFS(_x){return _ref.apply(this,arguments);};}();export var pinJSONToIPFS=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(JSONBody){var url;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:url=\"https://api.pinata.cloud/pinning/pinJSONToIPFS\";//making axios POST request to Pinata ⬇️\nreturn _context2.abrupt(\"return\",axios.post(url,JSONBody,{headers:{pinata_api_key:key,pinata_secret_api_key:secret}}).then(function(response){return{success:true,pinataUrl:\"https://gateway.pinata.cloud/ipfs/\"+response.data.IpfsHash};}).catch(function(error){console.log(error);return{success:false,message:error.message};}));case 2:case\"end\":return _context2.stop();}}},_callee2);}));return function pinJSONToIPFS(_x2){return _ref2.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/Users/x7491/Creating-Art-With-NFT-Generator/mintnft/src/utils/pinata.js"],"names":["require","config","key","process","env","REACT_APP_PINATA_KEY","secret","REACT_APP_PINATA_SECRET","axios","pinFileToIPFS","imageFile","url","data","FormData","append","post","maxBodyLength","headers","_boundary","pinata_api_key","pinata_secret_api_key","then","response","success","pinataUrl","IpfsHash","catch","error","console","log","message","pinJSONToIPFS","JSONBody"],"mappings":"uVAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB,GACA,GAAMC,CAAAA,GAAG,CAAGC,OAAO,CAACC,GAAR,CAAYC,oBAAxB,CACA,GAAMC,CAAAA,MAAM,CAAGH,OAAO,CAACC,GAAR,CAAYG,uBAA3B,CAEA,GAAMC,CAAAA,KAAK,CAAGR,OAAO,CAAC,OAAD,CAArB,CAEA;AACA,MAAO,IAAMS,CAAAA,aAAa,0FAAG,iBAAMC,SAAN,+HACnBC,GADmB,kDAErBC,IAFqB,CAEd,GAAIC,CAAAA,QAAJ,EAFc,CAGzBD,IAAI,CAACE,MAAL,CAAY,MAAZ,CAAoBJ,SAApB,EAHyB,gCAIlBF,KACX;AACA;AACA;AACA;AACA;AACA;AANgB,CAOPO,IAPE,CAOGJ,GAPH,CAOQC,IAPR,CAOc,CACbI,aAAa,CAAE,UADF,CAEbC,OAAO,CAAE,CACL,uDAAiDL,IAAI,CAACM,SAAtD,CADK,CAELC,cAAc,CAAEjB,GAFX,CAGLkB,qBAAqB,CAAEd,MAHlB,CAFI,CAPd,EAeFe,IAfE,CAeG,SAAUC,QAAV,CAAoB,CACvB,MAAO,CACHC,OAAO,CAAE,IADN,CAEHC,SAAS,CAAE,qCAAuCF,QAAQ,CAACV,IAAT,CAAca,QAF7D,CAAP,CAIF,CApBE,EAqBFC,KArBE,CAqBI,SAAUC,KAAV,CAAiB,CACpBC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACA,MAAO,CACHJ,OAAO,CAAE,KADN,CAEHO,OAAO,CAAEH,KAAK,CAACG,OAFZ,CAAP,CAIH,CA3BE,CAJkB,wDAAH,kBAAbrB,CAAAA,aAAa,4CAAnB,CAkCP,MAAO,IAAMsB,CAAAA,aAAa,2FAAG,kBAAMC,QAAN,8HACnBrB,GADmB,kDAEzB;AAFyB,iCAGlBH,KAAK,CACPO,IADE,CACGJ,GADH,CACQqB,QADR,CACkB,CACjBf,OAAO,CAAE,CACLE,cAAc,CAAEjB,GADX,CAELkB,qBAAqB,CAAEd,MAFlB,CADQ,CADlB,EAOFe,IAPE,CAOG,SAAUC,QAAV,CAAoB,CACvB,MAAO,CACHC,OAAO,CAAE,IADN,CAEHC,SAAS,CAAE,qCAAuCF,QAAQ,CAACV,IAAT,CAAca,QAF7D,CAAP,CAIF,CAZE,EAaFC,KAbE,CAaI,SAAUC,KAAV,CAAiB,CACpBC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACA,MAAO,CACHJ,OAAO,CAAE,KADN,CAEHO,OAAO,CAAEH,KAAK,CAACG,OAFZ,CAAP,CAIH,CAnBE,CAHkB,0DAAH,kBAAbC,CAAAA,aAAa,8CAAnB","sourcesContent":["require('dotenv').config();\r\nconst key = process.env.REACT_APP_PINATA_KEY;\r\nconst secret = process.env.REACT_APP_PINATA_SECRET;\r\n\r\nconst axios = require('axios');\r\n\r\n//upload file to ipfs\r\nexport const pinFileToIPFS = async(imageFile) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\r\n    let data = new FormData();\r\n    data.append(\"file\", imageFile);\r\n    return axios\r\n//        .post(url, file, {\r\n//            headers: {\r\n//                pinata_api_key: key,\r\n//                pinata_secret_api_key: secret,\r\n//            }\r\n//        })\r\n        .post(url, data, {\r\n            maxBodyLength: 'Infinity',\r\n            headers: {\r\n                'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\r\n                pinata_api_key: key,\r\n                pinata_secret_api_key: secret\r\n            }\r\n        })\r\n        .then(function (response) {\r\n           return {\r\n               success: true,\r\n               pinataUrl: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\r\n           };\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error)\r\n            return {\r\n                success: false,\r\n                message: error.message,\r\n            }\r\n        });\r\n}\r\n\r\nexport const pinJSONToIPFS = async(JSONBody) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n    //making axios POST request to Pinata ⬇️\r\n    return axios\r\n        .post(url, JSONBody, {\r\n            headers: {\r\n                pinata_api_key: key,\r\n                pinata_secret_api_key: secret,\r\n            }\r\n        })\r\n        .then(function (response) {\r\n           return {\r\n               success: true,\r\n               pinataUrl: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\r\n           };\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error)\r\n            return {\r\n                success: false,\r\n                message: error.message,\r\n            }\r\n        });\r\n};"]},"metadata":{},"sourceType":"module"}
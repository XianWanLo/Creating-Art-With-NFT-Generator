{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport assertNever from \"assert-never\";\nimport { delay, promisify } from \"../util/promises\";\nvar ALCHEMY_DISALLOWED_METHODS = [\"eth_accounts\", \"eth_sendTransaction\", \"eth_sign\", \"eth_signTypedData_v3\", \"eth_signTypedData\", \"personal_sign\"];\nexport function makePayloadSender(alchemySend, config, makePayload) {\n  var currentWriteProvider = getEip1193Provider(config.writeProvider, makePayload);\n\n  var sendPayload = function (payload) {\n    var disallowedMethod = getDisallowedMethod(payload);\n\n    if (!disallowedMethod) {\n      try {\n        return sendWithRetries(payload, alchemySend, config);\n      } catch (alchemyError) {\n        // Fallback to write provider, but if both fail throw the error from\n        // Alchemy.\n        if (!currentWriteProvider) {\n          throw alchemyError;\n        }\n\n        try {\n          return sendWithProvider(currentWriteProvider, payload);\n        } catch (_a) {\n          throw alchemyError;\n        }\n      }\n    } else {\n      if (!currentWriteProvider) {\n        throw new Error(\"No provider available for method \\\"\" + disallowedMethod + \"\\\"\");\n      }\n\n      return sendWithProvider(currentWriteProvider, payload);\n    }\n  };\n\n  function setWriteProvider(writeProvider) {\n    currentWriteProvider = getEip1193Provider(writeProvider, makePayload);\n  }\n\n  return {\n    sendPayload: sendPayload,\n    setWriteProvider: setWriteProvider\n  };\n}\n\nfunction getEip1193Provider(provider, makePayload) {\n  if (!provider) {\n    return undefined;\n  }\n\n  var anyProvider = provider;\n  var sendMethod = (anyProvider.sendAsync ? anyProvider.sendAsync : anyProvider.send).bind(anyProvider);\n  return {\n    send: function (method, params) {\n      return promisify(function (callback) {\n        return sendMethod(makePayload(method, params), callback);\n      });\n    }\n  };\n}\n\nfunction sendWithProvider(provider, payload) {\n  if (!Array.isArray(payload)) {\n    var method = payload.method,\n        params = payload.params;\n    return provider.send(method, params);\n  } else {\n    // These providers don't support batches, sadly.\n    return Promise.all(payload.map(function (_a) {\n      var method = _a.method,\n          params = _a.params;\n      return provider.send(method, params);\n    }));\n  }\n}\n\nfunction getDisallowedMethod(payload) {\n  var payloads = Array.isArray(payload) ? payload : [payload];\n  var disallowedRequest = payloads.find(function (p) {\n    return ALCHEMY_DISALLOWED_METHODS.indexOf(p.method) >= 0;\n  }) || undefined;\n  return disallowedRequest && disallowedRequest.method;\n}\n\nfunction sendWithRetries(payload, alchemySend, _a) {\n  var maxRetries = _a.maxRetries,\n      retryInterval = _a.retryInterval,\n      retryJitter = _a.retryJitter;\n  return __awaiter(this, void 0, void 0, function () {\n    var i, result, status_1, message, statusString;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          i = 0;\n          _b.label = 1;\n\n        case 1:\n          if (!(i < maxRetries + 1)) return [3\n          /*break*/\n          , 5];\n          return [4\n          /*yield*/\n          , alchemySend(payload)];\n\n        case 2:\n          result = _b.sent();\n\n          switch (result.type) {\n            case \"jsonrpc\":\n              return [2\n              /*return*/\n              , result.response];\n\n            case \"rateLimit\":\n              break;\n\n            case \"networkError\":\n              {\n                status_1 = result.status, message = result.message;\n                statusString = status_1 !== 0 ? \"(\" + status_1 + \") \" : \"\";\n                throw new Error(statusString + \" \" + message);\n              }\n\n            default:\n              return [2\n              /*return*/\n              , assertNever(result)];\n          }\n\n          return [4\n          /*yield*/\n          , delay(retryInterval + (retryJitter * Math.random() | 0))];\n\n        case 3:\n          _b.sent();\n\n          _b.label = 4;\n\n        case 4:\n          i++;\n          return [3\n          /*break*/\n          , 1];\n\n        case 5:\n          throw new Error(\"Rate limited for \" + (maxRetries + 1) + \" consecutive attempts.\");\n      }\n    });\n  });\n}","map":{"version":3,"sources":["../../../src/web3-adapter/sendPayload.ts"],"names":[],"mappings":"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","sourcesContent":["import assertNever from \"assert-never\";\nimport {\n  Eip1193Provider,\n  FullConfig,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  Provider,\n  SingleOrBatchRequest,\n  SingleOrBatchResponse,\n} from \"../types\";\nimport { PayloadFactory } from \"../util/jsonRpc\";\nimport { delay, promisify } from \"../util/promises\";\nimport { AlchemySendFunction } from \"./alchemySend\";\n\nconst ALCHEMY_DISALLOWED_METHODS: string[] = [\n  \"eth_accounts\",\n  \"eth_sendTransaction\",\n  \"eth_sign\",\n  \"eth_signTypedData_v3\",\n  \"eth_signTypedData\",\n  \"personal_sign\",\n];\n\nexport interface PayloadSender {\n  sendPayload: SendPayloadFunction;\n  setWriteProvider(writeProvider: Provider | null | undefined): void;\n}\n\nexport interface SendPayloadFunction {\n  (payload: JsonRpcRequest): Promise<JsonRpcResponse>;\n  (payload: SingleOrBatchRequest): Promise<SingleOrBatchResponse>;\n}\n\nexport function makePayloadSender(\n  alchemySend: AlchemySendFunction,\n  config: FullConfig,\n  makePayload: PayloadFactory,\n): PayloadSender {\n  let currentWriteProvider = getEip1193Provider(\n    config.writeProvider,\n    makePayload,\n  );\n\n  const sendPayload = (\n    payload: SingleOrBatchRequest,\n  ): Promise<SingleOrBatchResponse> => {\n    const disallowedMethod = getDisallowedMethod(payload);\n    if (!disallowedMethod) {\n      try {\n        return sendWithRetries(payload, alchemySend, config);\n      } catch (alchemyError) {\n        // Fallback to write provider, but if both fail throw the error from\n        // Alchemy.\n        if (!currentWriteProvider) {\n          throw alchemyError;\n        }\n        try {\n          return sendWithProvider(currentWriteProvider, payload);\n        } catch {\n          throw alchemyError;\n        }\n      }\n    } else {\n      if (!currentWriteProvider) {\n        throw new Error(\n          `No provider available for method \"${disallowedMethod}\"`,\n        );\n      }\n      return sendWithProvider(currentWriteProvider, payload);\n    }\n  };\n\n  function setWriteProvider(writeProvider: Provider | null | undefined) {\n    currentWriteProvider = getEip1193Provider(writeProvider, makePayload);\n  }\n\n  return { sendPayload: sendPayload as SendPayloadFunction, setWriteProvider };\n}\n\nfunction getEip1193Provider(\n  provider: Provider | null | undefined,\n  makePayload: PayloadFactory,\n): Eip1193Provider | undefined {\n  if (!provider) {\n    return undefined;\n  }\n  const anyProvider: any = provider;\n  const sendMethod = (anyProvider.sendAsync\n    ? anyProvider.sendAsync\n    : anyProvider.send\n  ).bind(anyProvider);\n  return {\n    send: (method, params) =>\n      promisify((callback) =>\n        sendMethod(makePayload(method, params), callback),\n      ),\n  };\n}\n\nfunction sendWithProvider(\n  provider: Eip1193Provider,\n  payload: SingleOrBatchRequest,\n): Promise<SingleOrBatchResponse> {\n  if (!Array.isArray(payload)) {\n    const { method, params } = payload;\n    return provider.send(method, params);\n  } else {\n    // These providers don't support batches, sadly.\n    return Promise.all(\n      payload.map(({ method, params }) => provider.send(method, params)),\n    );\n  }\n}\n\nfunction getDisallowedMethod(\n  payload: SingleOrBatchRequest,\n): string | undefined {\n  const payloads = Array.isArray(payload) ? payload : [payload];\n  const disallowedRequest =\n    payloads.find((p) => ALCHEMY_DISALLOWED_METHODS.indexOf(p.method) >= 0) ||\n    undefined;\n  return disallowedRequest && disallowedRequest.method;\n}\n\nasync function sendWithRetries(\n  payload: SingleOrBatchRequest,\n  alchemySend: AlchemySendFunction,\n  { maxRetries, retryInterval, retryJitter }: FullConfig,\n): Promise<SingleOrBatchResponse> {\n  for (let i = 0; i < maxRetries + 1; i++) {\n    const result = await alchemySend(payload);\n    switch (result.type) {\n      case \"jsonrpc\":\n        return result.response;\n      case \"rateLimit\":\n        break;\n      case \"networkError\": {\n        const { status, message } = result;\n        const statusString = status !== 0 ? `(${status}) ` : \"\";\n        throw new Error(`${statusString} ${message}`);\n      }\n      default:\n        return assertNever(result);\n    }\n    await delay(retryInterval + ((retryJitter * Math.random()) | 0));\n  }\n  throw new Error(`Rate limited for ${maxRetries + 1} consecutive attempts.`);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
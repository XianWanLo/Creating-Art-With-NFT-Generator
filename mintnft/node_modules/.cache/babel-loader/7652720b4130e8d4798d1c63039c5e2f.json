{"ast":null,"code":"/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n'use strict';\n\nvar _regeneratorRuntime = require(\"C:/Users/x7491/Creating-Art-With-NFT-Generator/mintnft/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/x7491/Creating-Art-With-NFT-Generator/mintnft/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _ = require('underscore');\n\nvar errors = require('web3-core-helpers').errors;\n\nvar formatters = require('web3-core-helpers').formatters;\n\nvar utils = require('web3-utils');\n\nvar promiEvent = require('web3-core-promievent');\n\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\n\nvar EthersTransactionUtils = require('@ethersproject/transactions');\n\nvar Method = function Method(options) {\n  if (!options.call || !options.name) {\n    throw new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.');\n  }\n\n  this.name = options.name;\n  this.call = options.call;\n  this.params = options.params || 0;\n  this.inputFormatter = options.inputFormatter;\n  this.outputFormatter = options.outputFormatter;\n  this.transformPayload = options.transformPayload;\n  this.extraFormatters = options.extraFormatters;\n  this.abiCoder = options.abiCoder; // Will be used to encode the revert reason string\n\n  this.requestManager = options.requestManager; // reference to eth.accounts\n\n  this.accounts = options.accounts;\n  this.defaultBlock = options.defaultBlock || 'latest';\n  this.defaultAccount = options.defaultAccount || null;\n  this.transactionBlockTimeout = options.transactionBlockTimeout || 50;\n  this.transactionConfirmationBlocks = options.transactionConfirmationBlocks || 24;\n  this.transactionPollingTimeout = options.transactionPollingTimeout || 750;\n  this.defaultCommon = options.defaultCommon;\n  this.defaultChain = options.defaultChain;\n  this.defaultHardfork = options.defaultHardfork;\n  this.handleRevert = options.handleRevert;\n};\n\nMethod.prototype.setRequestManager = function (requestManager, accounts) {\n  this.requestManager = requestManager; // reference to eth.accounts\n\n  if (accounts) {\n    this.accounts = accounts;\n  }\n};\n\nMethod.prototype.createFunction = function (requestManager, accounts) {\n  var func = this.buildCall();\n  func.call = this.call;\n  this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);\n  return func;\n};\n\nMethod.prototype.attachToObject = function (obj) {\n  var func = this.buildCall();\n  func.call = this.call;\n  var name = this.name.split('.');\n\n  if (name.length > 1) {\n    obj[name[0]] = obj[name[0]] || {};\n    obj[name[0]][name[1]] = func;\n  } else {\n    obj[name[0]] = func;\n  }\n};\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\n\n\nMethod.prototype.getCall = function (args) {\n  return _.isFunction(this.call) ? this.call(args) : this.call;\n};\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\n\n\nMethod.prototype.extractCallback = function (args) {\n  if (_.isFunction(args[args.length - 1])) {\n    return args.pop(); // modify the args array!\n  }\n};\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\n\n\nMethod.prototype.validateArgs = function (args) {\n  if (args.length !== this.params) {\n    throw errors.InvalidNumberOfParams(args.length, this.params, this.name);\n  }\n};\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\n\n\nMethod.prototype.formatInput = function (args) {\n  var _this = this;\n\n  if (!this.inputFormatter) {\n    return args;\n  }\n\n  return this.inputFormatter.map(function (formatter, index) {\n    // bind this for defaultBlock, and defaultAccount\n    return formatter ? formatter.call(_this, args[index]) : args[index];\n  });\n};\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\n\n\nMethod.prototype.formatOutput = function (result) {\n  var _this = this;\n\n  if (_.isArray(result)) {\n    return result.map(function (res) {\n      return _this.outputFormatter && res ? _this.outputFormatter(res) : res;\n    });\n  } else {\n    return this.outputFormatter && result ? this.outputFormatter(result) : result;\n  }\n};\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\n\n\nMethod.prototype.toPayload = function (args) {\n  var call = this.getCall(args);\n  var callback = this.extractCallback(args);\n  var params = this.formatInput(args);\n  this.validateArgs(params);\n  var payload = {\n    method: call,\n    params: params,\n    callback: callback\n  };\n\n  if (this.transformPayload) {\n    payload = this.transformPayload(payload);\n  }\n\n  return payload;\n};\n\nMethod.prototype._confirmTransaction = function (defer, result, payload) {\n  var method = this,\n      promiseResolved = false,\n      canUnsubscribe = true,\n      timeoutCount = 0,\n      confirmationCount = 0,\n      intervalId = null,\n      lastBlock = null,\n      receiptJSON = '',\n      gasProvided = _.isObject(payload.params[0]) && payload.params[0].gas ? payload.params[0].gas : null,\n      isContractDeployment = _.isObject(payload.params[0]) && payload.params[0].data && payload.params[0].from && !payload.params[0].to,\n      hasBytecode = isContractDeployment && payload.params[0].data.length > 2; // add custom send Methods\n\n  var _ethereumCalls = [new Method({\n    name: 'getBlockByNumber',\n    call: 'eth_getBlockByNumber',\n    params: 2,\n    inputFormatter: [formatters.inputBlockNumberFormatter, function (val) {\n      return !!val;\n    }],\n    outputFormatter: formatters.outputBlockFormatter\n  }), new Method({\n    name: 'getTransactionReceipt',\n    call: 'eth_getTransactionReceipt',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatters.outputTransactionReceiptFormatter\n  }), new Method({\n    name: 'getCode',\n    call: 'eth_getCode',\n    params: 2,\n    inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n  }), new Method({\n    name: 'getTransactionByHash',\n    call: 'eth_getTransactionByHash',\n    params: 1,\n    inputFormatter: [null],\n    outputFormatter: formatters.outputTransactionFormatter\n  }), new Subscriptions({\n    name: 'subscribe',\n    type: 'eth',\n    subscriptions: {\n      'newBlockHeaders': {\n        subscriptionName: 'newHeads',\n        params: 0,\n        outputFormatter: formatters.outputBlockFormatter\n      }\n    }\n  })]; // attach methods to this._ethereumCall\n\n  var _ethereumCall = {};\n\n  _.each(_ethereumCalls, function (mthd) {\n    mthd.attachToObject(_ethereumCall);\n    mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()\n  }); // fire \"receipt\" and confirmation events and resolve after\n\n\n  var checkConfirmation = function checkConfirmation(existingReceipt, isPolling, err, blockHeader, sub) {\n    if (!err) {\n      // create fake unsubscribe\n      if (!sub) {\n        sub = {\n          unsubscribe: function unsubscribe() {\n            clearInterval(intervalId);\n          }\n        };\n      } // if we have a valid receipt we don't need to send a request\n\n\n      return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result) // catch error from requesting receipt\n      ).catch(function (err) {\n        sub.unsubscribe();\n        promiseResolved = true;\n\n        utils._fireError({\n          message: 'Failed to check for transaction receipt:',\n          data: err\n        }, defer.eventEmitter, defer.reject);\n      }) // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n      .then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(receipt) {\n          var block, latestBlock, latestBlockHash;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (!(!receipt || !receipt.blockHash)) {\n                    _context.next = 2;\n                    break;\n                  }\n\n                  throw new Error('Receipt missing or blockHash null');\n\n                case 2:\n                  // apply extra formatters\n                  if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n                    receipt = method.extraFormatters.receiptFormatter(receipt);\n                  } // check if confirmation listener exists\n\n\n                  if (!(defer.eventEmitter.listeners('confirmation').length > 0)) {\n                    _context.next = 28;\n                    break;\n                  }\n\n                  if (!(existingReceipt === undefined || confirmationCount !== 0)) {\n                    _context.next = 25;\n                    break;\n                  }\n\n                  _context.next = 7;\n                  return _ethereumCall.getBlockByNumber('latest');\n\n                case 7:\n                  latestBlock = _context.sent;\n                  latestBlockHash = latestBlock ? latestBlock.hash : null;\n\n                  if (!isPolling) {\n                    _context.next = 24;\n                    break;\n                  }\n\n                  if (!lastBlock) {\n                    _context.next = 17;\n                    break;\n                  }\n\n                  _context.next = 13;\n                  return _ethereumCall.getBlockByNumber(lastBlock.number + 1);\n\n                case 13:\n                  block = _context.sent;\n\n                  if (block) {\n                    lastBlock = block;\n                    defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                  }\n\n                  _context.next = 22;\n                  break;\n\n                case 17:\n                  _context.next = 19;\n                  return _ethereumCall.getBlockByNumber(receipt.blockNumber);\n\n                case 19:\n                  block = _context.sent;\n                  lastBlock = block;\n                  defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n\n                case 22:\n                  _context.next = 25;\n                  break;\n\n                case 24:\n                  defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n\n                case 25:\n                  if (isPolling && block || !isPolling) {\n                    confirmationCount++;\n                  }\n\n                  canUnsubscribe = false;\n\n                  if (confirmationCount === method.transactionConfirmationBlocks + 1) {\n                    // add 1 so we account for conf 0\n                    sub.unsubscribe();\n                    defer.eventEmitter.removeAllListeners();\n                  }\n\n                case 28:\n                  return _context.abrupt(\"return\", receipt);\n\n                case 29:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()) // CHECK for CONTRACT DEPLOYMENT\n      .then( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(receipt) {\n          var code, deploymentSuccess;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!(isContractDeployment && !promiseResolved)) {\n                    _context2.next = 19;\n                    break;\n                  }\n\n                  if (receipt.contractAddress) {\n                    _context2.next = 5;\n                    break;\n                  }\n\n                  if (canUnsubscribe) {\n                    sub.unsubscribe();\n                    promiseResolved = true;\n                  }\n\n                  utils._fireError(errors.NoContractAddressFoundError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n\n                  return _context2.abrupt(\"return\");\n\n                case 5:\n                  _context2.prev = 5;\n                  _context2.next = 8;\n                  return _ethereumCall.getCode(receipt.contractAddress);\n\n                case 8:\n                  code = _context2.sent;\n                  _context2.next = 13;\n                  break;\n\n                case 11:\n                  _context2.prev = 11;\n                  _context2.t0 = _context2[\"catch\"](5);\n\n                case 13:\n                  if (code) {\n                    _context2.next = 15;\n                    break;\n                  }\n\n                  return _context2.abrupt(\"return\");\n\n                case 15:\n                  // If deployment is status.true and there was a real\n                  // bytecode string, assume it was successful.\n                  deploymentSuccess = receipt.status === true && hasBytecode;\n\n                  if (deploymentSuccess || code.length > 2) {\n                    defer.eventEmitter.emit('receipt', receipt); // if contract, return instance instead of receipt\n\n                    if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {\n                      defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));\n                    } else {\n                      defer.resolve(receipt);\n                    } // need to remove listeners, as they aren't removed automatically when succesfull\n\n\n                    if (canUnsubscribe) {\n                      defer.eventEmitter.removeAllListeners();\n                    }\n                  } else {\n                    utils._fireError(errors.ContractCodeNotStoredError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                  }\n\n                  if (canUnsubscribe) {\n                    sub.unsubscribe();\n                  }\n\n                  promiseResolved = true;\n\n                case 19:\n                  return _context2.abrupt(\"return\", receipt);\n\n                case 20:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[5, 11]]);\n        }));\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()) // CHECK for normal tx check for receipt only\n      .then( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(receipt) {\n          var revertMessage, txReplayOptions, rawTransactionHex, parsedTx;\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  if (!(!isContractDeployment && !promiseResolved)) {\n                    _context3.next = 35;\n                    break;\n                  }\n\n                  if (!(!receipt.outOfGas && (!gasProvided || gasProvided !== receipt.gasUsed) && (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined'))) {\n                    _context3.next = 7;\n                    break;\n                  }\n\n                  defer.eventEmitter.emit('receipt', receipt);\n                  defer.resolve(receipt); // need to remove listeners, as they aren't removed automatically when succesfull\n\n                  if (canUnsubscribe) {\n                    defer.eventEmitter.removeAllListeners();\n                  }\n\n                  _context3.next = 33;\n                  break;\n\n                case 7:\n                  receiptJSON = JSON.stringify(receipt, null, 2);\n\n                  if (!(receipt.status === false || receipt.status === '0x0')) {\n                    _context3.next = 32;\n                    break;\n                  }\n\n                  _context3.prev = 9;\n                  revertMessage = null;\n\n                  if (!(method.handleRevert && (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'))) {\n                    _context3.next = 24;\n                    break;\n                  }\n\n                  txReplayOptions = payload.params[0]; // If send was raw, fetch the transaction and reconstitute the\n                  // original params so they can be replayed with `eth_call`\n\n                  if (method.call === 'eth_sendRawTransaction') {\n                    rawTransactionHex = payload.params[0];\n                    parsedTx = EthersTransactionUtils.parse(rawTransactionHex);\n                    txReplayOptions = formatters.inputTransactionFormatter({\n                      data: parsedTx.data,\n                      to: parsedTx.to,\n                      from: parsedTx.from,\n                      gas: parsedTx.gasLimit.toHexString(),\n                      gasPrice: parsedTx.gasPrice.toHexString(),\n                      value: parsedTx.value.toHexString()\n                    });\n                  } // Get revert reason string with eth_call\n\n\n                  _context3.next = 16;\n                  return method.getRevertReason(txReplayOptions, receipt.blockNumber);\n\n                case 16:\n                  revertMessage = _context3.sent;\n\n                  if (!revertMessage) {\n                    _context3.next = 21;\n                    break;\n                  }\n\n                  // Only throw a revert error if a revert reason is existing\n                  utils._fireError(errors.TransactionRevertInstructionError(revertMessage.reason, revertMessage.signature, receipt), defer.eventEmitter, defer.reject, null, receipt);\n\n                  _context3.next = 22;\n                  break;\n\n                case 21:\n                  throw false;\n\n                case 22:\n                  _context3.next = 25;\n                  break;\n\n                case 24:\n                  throw false;\n\n                case 25:\n                  _context3.next = 30;\n                  break;\n\n                case 27:\n                  _context3.prev = 27;\n                  _context3.t0 = _context3[\"catch\"](9);\n\n                  // Throw an normal revert error if no revert reason is given or the detection of it is disabled\n                  utils._fireError(errors.TransactionRevertedWithoutReasonError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n\n                case 30:\n                  _context3.next = 33;\n                  break;\n\n                case 32:\n                  // Throw OOG if status is not existing and provided gas and used gas are equal\n                  utils._fireError(errors.TransactionOutOfGasError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n\n                case 33:\n                  if (canUnsubscribe) {\n                    sub.unsubscribe();\n                  }\n\n                  promiseResolved = true;\n\n                case 35:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, null, [[9, 27]]);\n        }));\n\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }()) // time out the transaction if not mined after 50 blocks\n      .catch(function () {\n        timeoutCount++; // check to see if we are http polling\n\n        if (!!isPolling) {\n          // polling timeout is different than transactionBlockTimeout blocks since we are triggering every second\n          if (timeoutCount - 1 >= method.transactionPollingTimeout) {\n            sub.unsubscribe();\n            promiseResolved = true;\n\n            utils._fireError(errors.TransactionError('Transaction was not mined within ' + method.transactionPollingTimeout + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n          }\n        } else {\n          if (timeoutCount - 1 >= method.transactionBlockTimeout) {\n            sub.unsubscribe();\n            promiseResolved = true;\n\n            utils._fireError(errors.TransactionError('Transaction was not mined within ' + method.transactionBlockTimeout + ' blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n          }\n        }\n      });\n    } else {\n      sub.unsubscribe();\n      promiseResolved = true;\n\n      utils._fireError({\n        message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.',\n        data: err\n      }, defer.eventEmitter, defer.reject);\n    }\n  }; // start watching for confirmation depending on the support features of the provider\n\n\n  var startWatching = function (existingReceipt) {\n    var startInterval = function startInterval() {\n      intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);\n    };\n\n    if (!this.requestManager.provider.on) {\n      startInterval();\n    } else {\n      _ethereumCall.subscribe('newBlockHeaders', function (err, blockHeader, sub) {\n        if (err || !blockHeader) {\n          // fall back to polling\n          startInterval();\n        } else {\n          checkConfirmation(existingReceipt, false, err, blockHeader, sub);\n        }\n      });\n    }\n  }.bind(this); // first check if we already have a confirmed transaction\n\n\n  _ethereumCall.getTransactionReceipt(result).then(function (receipt) {\n    if (receipt && receipt.blockHash) {\n      if (defer.eventEmitter.listeners('confirmation').length > 0) {\n        // We must keep on watching for new Blocks, if a confirmation listener is present\n        startWatching(receipt);\n      }\n\n      checkConfirmation(receipt, false);\n    } else if (!promiseResolved) {\n      startWatching();\n    }\n  }).catch(function () {\n    if (!promiseResolved) startWatching();\n  });\n};\n\nvar getWallet = function getWallet(from, accounts) {\n  var wallet = null; // is index given\n\n  if (_.isNumber(from)) {\n    wallet = accounts.wallet[from]; // is account given\n  } else if (_.isObject(from) && from.address && from.privateKey) {\n    wallet = from; // search in wallet for address\n  } else {\n    wallet = accounts.wallet[from.toLowerCase()];\n  }\n\n  return wallet;\n};\n\nMethod.prototype.buildCall = function () {\n  var method = this,\n      isSendTx = method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction',\n      // || method.call === 'personal_sendTransaction'\n  isCall = method.call === 'eth_call'; // actual send function\n\n  var send = function send() {\n    var defer = promiEvent(!isSendTx),\n        payload = method.toPayload(Array.prototype.slice.call(arguments)); // CALLBACK function\n\n    var sendTxCallback = function sendTxCallback(err, result) {\n      if (method.handleRevert && isCall && method.abiCoder) {\n        var reasonData; // Ganache / Geth <= 1.9.13 return the reason data as a successful eth_call response\n        // Geth >= 1.9.15 attaches the reason data to an error object.\n        // Geth 1.9.14 is missing revert reason (https://github.com/ethereum/web3.js/issues/3520)\n\n        if (!err && method.isRevertReasonString(result)) {\n          reasonData = result.substring(10);\n        } else if (err && err.data) {\n          reasonData = err.data.substring(10);\n        }\n\n        if (reasonData) {\n          var reason = method.abiCoder.decodeParameter('string', '0x' + reasonData);\n          var signature = 'Error(String)';\n\n          utils._fireError(errors.RevertInstructionError(reason, signature), defer.eventEmitter, defer.reject, payload.callback, {\n            reason: reason,\n            signature: signature\n          });\n\n          return;\n        }\n      }\n\n      try {\n        result = method.formatOutput(result);\n      } catch (e) {\n        err = e;\n      }\n\n      if (result instanceof Error) {\n        err = result;\n      }\n\n      if (!err) {\n        if (payload.callback) {\n          payload.callback(null, result);\n        }\n      } else {\n        if (err.error) {\n          err = err.error;\n        }\n\n        return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);\n      } // return PROMISE\n\n\n      if (!isSendTx) {\n        if (!err) {\n          defer.resolve(result);\n        } // return PROMIEVENT\n\n      } else {\n        defer.eventEmitter.emit('transactionHash', result);\n\n        method._confirmTransaction(defer, result, payload);\n      }\n    }; // SENDS the SIGNED SIGNATURE\n\n\n    var sendSignedTx = function sendSignedTx(sign) {\n      var signedPayload = _.extend({}, payload, {\n        method: 'eth_sendRawTransaction',\n        params: [sign.rawTransaction]\n      });\n\n      method.requestManager.send(signedPayload, sendTxCallback);\n    };\n\n    var sendRequest = function sendRequest(payload, method) {\n      if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n        var wallet; // ETH_SENDTRANSACTION\n\n        if (payload.method === 'eth_sendTransaction') {\n          var tx = payload.params[0];\n          wallet = getWallet(_.isObject(tx) ? tx.from : null, method.accounts); // If wallet was found, sign tx, and send using sendRawTransaction\n\n          if (wallet && wallet.privateKey) {\n            var txOptions = _.omit(tx, 'from');\n\n            if (method.defaultChain && !txOptions.chain) {\n              txOptions.chain = method.defaultChain;\n            }\n\n            if (method.defaultHardfork && !txOptions.hardfork) {\n              txOptions.hardfork = method.defaultHardfork;\n            }\n\n            if (method.defaultCommon && !txOptions.common) {\n              txOptions.common = method.defaultCommon;\n            }\n\n            method.accounts.signTransaction(txOptions, wallet.privateKey).then(sendSignedTx).catch(function (err) {\n              if (_.isFunction(defer.eventEmitter.listeners) && defer.eventEmitter.listeners('error').length) {\n                try {\n                  defer.eventEmitter.emit('error', err);\n                } catch (err) {// Ignore userland error prevent it to bubble up within web3.\n                }\n\n                defer.eventEmitter.removeAllListeners();\n                defer.eventEmitter.catch(function () {});\n              }\n\n              defer.reject(err);\n            });\n            return;\n          } // ETH_SIGN\n\n        } else if (payload.method === 'eth_sign') {\n          var data = payload.params[1];\n          wallet = getWallet(payload.params[0], method.accounts); // If wallet was found, sign tx, and send using sendRawTransaction\n\n          if (wallet && wallet.privateKey) {\n            var sign = method.accounts.sign(data, wallet.privateKey);\n\n            if (payload.callback) {\n              payload.callback(null, sign.signature);\n            }\n\n            defer.resolve(sign.signature);\n            return;\n          }\n        }\n      }\n\n      return method.requestManager.send(payload, sendTxCallback);\n    }; // Send the actual transaction\n\n\n    if (isSendTx && _.isObject(payload.params[0]) && typeof payload.params[0].gasPrice === 'undefined') {\n      var getGasPrice = new Method({\n        name: 'getGasPrice',\n        call: 'eth_gasPrice',\n        params: 0\n      }).createFunction(method.requestManager);\n      getGasPrice(function (err, gasPrice) {\n        if (gasPrice) {\n          payload.params[0].gasPrice = gasPrice;\n        }\n\n        if (isSendTx) {\n          setTimeout(function () {\n            defer.eventEmitter.emit('sending', payload);\n          }, 0);\n        }\n\n        sendRequest(payload, method);\n      });\n    } else {\n      if (isSendTx) {\n        setTimeout(function () {\n          defer.eventEmitter.emit('sending', payload);\n        }, 0);\n      }\n\n      sendRequest(payload, method);\n    }\n\n    if (isSendTx) {\n      setTimeout(function () {\n        defer.eventEmitter.emit('sent', payload);\n      }, 0);\n    }\n\n    return defer.eventEmitter;\n  }; // necessary to attach things to the method\n\n\n  send.method = method; // necessary for batch requests\n\n  send.request = this.request.bind(this);\n  return send;\n};\n/**\n * Returns the revert reason string if existing or otherwise false.\n *\n * @method getRevertReason\n *\n * @param {Object} txOptions\n * @param {Number} blockNumber\n *\n * @returns {Promise<Boolean|String>}\n */\n\n\nMethod.prototype.getRevertReason = function (txOptions, blockNumber) {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    new Method({\n      name: 'call',\n      call: 'eth_call',\n      params: 2,\n      abiCoder: self.abiCoder,\n      handleRevert: true\n    }).createFunction(self.requestManager)(txOptions, utils.numberToHex(blockNumber)).then(function () {\n      resolve(false);\n    }).catch(function (error) {\n      if (error.reason) {\n        resolve({\n          reason: error.reason,\n          signature: error.signature\n        });\n      } else {\n        reject(error);\n      }\n    });\n  });\n};\n/**\n * Checks if the given hex string is a revert message from the EVM\n *\n * @method isRevertReasonString\n *\n * @param {String} data - Hex string prefixed with 0x\n *\n * @returns {Boolean}\n */\n\n\nMethod.prototype.isRevertReasonString = function (data) {\n  return _.isString(data) && (data.length - 2) / 2 % 32 === 4 && data.substring(0, 10) === '0x08c379a0';\n};\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\n\n\nMethod.prototype.request = function () {\n  var payload = this.toPayload(Array.prototype.slice.call(arguments));\n  payload.format = this.formatOutput.bind(this);\n  return payload;\n};\n\nmodule.exports = Method;","map":{"version":3,"names":["_","require","errors","formatters","utils","promiEvent","Subscriptions","subscriptions","EthersTransactionUtils","Method","options","call","name","Error","params","inputFormatter","outputFormatter","transformPayload","extraFormatters","abiCoder","requestManager","accounts","defaultBlock","defaultAccount","transactionBlockTimeout","transactionConfirmationBlocks","transactionPollingTimeout","defaultCommon","defaultChain","defaultHardfork","handleRevert","prototype","setRequestManager","createFunction","func","buildCall","attachToObject","obj","split","length","getCall","args","isFunction","extractCallback","pop","validateArgs","InvalidNumberOfParams","formatInput","_this","map","formatter","index","formatOutput","result","isArray","res","toPayload","callback","payload","method","_confirmTransaction","defer","promiseResolved","canUnsubscribe","timeoutCount","confirmationCount","intervalId","lastBlock","receiptJSON","gasProvided","isObject","gas","isContractDeployment","data","from","to","hasBytecode","_ethereumCalls","inputBlockNumberFormatter","val","outputBlockFormatter","outputTransactionReceiptFormatter","inputAddressFormatter","inputDefaultBlockNumberFormatter","outputTransactionFormatter","type","subscriptionName","_ethereumCall","each","mthd","checkConfirmation","existingReceipt","isPolling","err","blockHeader","sub","unsubscribe","clearInterval","resolve","getTransactionReceipt","catch","_fireError","message","eventEmitter","reject","then","receipt","blockHash","receiptFormatter","listeners","undefined","getBlockByNumber","latestBlock","latestBlockHash","hash","number","block","emit","blockNumber","removeAllListeners","contractAddress","NoContractAddressFoundError","getCode","code","deploymentSuccess","status","contractDeployFormatter","ContractCodeNotStoredError","outOfGas","gasUsed","JSON","stringify","revertMessage","txReplayOptions","rawTransactionHex","parsedTx","parse","inputTransactionFormatter","gasLimit","toHexString","gasPrice","value","getRevertReason","TransactionRevertInstructionError","reason","signature","TransactionRevertedWithoutReasonError","TransactionOutOfGasError","TransactionError","startWatching","startInterval","setInterval","bind","provider","on","subscribe","getWallet","wallet","isNumber","address","privateKey","toLowerCase","isSendTx","isCall","send","Array","slice","arguments","sendTxCallback","reasonData","isRevertReasonString","substring","decodeParameter","RevertInstructionError","e","error","sendSignedTx","sign","signedPayload","extend","rawTransaction","sendRequest","tx","txOptions","omit","chain","hardfork","common","signTransaction","getGasPrice","setTimeout","request","self","Promise","numberToHex","isString","format","module","exports"],"sources":["C:/Users/x7491/Creating-Art-With-NFT-Generator/mintnft/node_modules/web3-core-method/lib/index.js"],"sourcesContent":["/*\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n'use strict';\nvar _ = require('underscore');\nvar errors = require('web3-core-helpers').errors;\nvar formatters = require('web3-core-helpers').formatters;\nvar utils = require('web3-utils');\nvar promiEvent = require('web3-core-promievent');\nvar Subscriptions = require('web3-core-subscriptions').subscriptions;\nvar EthersTransactionUtils = require('@ethersproject/transactions');\nvar Method = function Method(options) {\n    if (!options.call || !options.name) {\n        throw new Error('When creating a method you need to provide at least the \"name\" and \"call\" property.');\n    }\n    this.name = options.name;\n    this.call = options.call;\n    this.params = options.params || 0;\n    this.inputFormatter = options.inputFormatter;\n    this.outputFormatter = options.outputFormatter;\n    this.transformPayload = options.transformPayload;\n    this.extraFormatters = options.extraFormatters;\n    this.abiCoder = options.abiCoder; // Will be used to encode the revert reason string\n    this.requestManager = options.requestManager;\n    // reference to eth.accounts\n    this.accounts = options.accounts;\n    this.defaultBlock = options.defaultBlock || 'latest';\n    this.defaultAccount = options.defaultAccount || null;\n    this.transactionBlockTimeout = options.transactionBlockTimeout || 50;\n    this.transactionConfirmationBlocks = options.transactionConfirmationBlocks || 24;\n    this.transactionPollingTimeout = options.transactionPollingTimeout || 750;\n    this.defaultCommon = options.defaultCommon;\n    this.defaultChain = options.defaultChain;\n    this.defaultHardfork = options.defaultHardfork;\n    this.handleRevert = options.handleRevert;\n};\nMethod.prototype.setRequestManager = function (requestManager, accounts) {\n    this.requestManager = requestManager;\n    // reference to eth.accounts\n    if (accounts) {\n        this.accounts = accounts;\n    }\n};\nMethod.prototype.createFunction = function (requestManager, accounts) {\n    var func = this.buildCall();\n    func.call = this.call;\n    this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts);\n    return func;\n};\nMethod.prototype.attachToObject = function (obj) {\n    var func = this.buildCall();\n    func.call = this.call;\n    var name = this.name.split('.');\n    if (name.length > 1) {\n        obj[name[0]] = obj[name[0]] || {};\n        obj[name[0]][name[1]] = func;\n    }\n    else {\n        obj[name[0]] = func;\n    }\n};\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nMethod.prototype.getCall = function (args) {\n    return _.isFunction(this.call) ? this.call(args) : this.call;\n};\n/**\n * Should be used to extract callback from array of arguments. Modifies input param\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nMethod.prototype.extractCallback = function (args) {\n    if (_.isFunction(args[args.length - 1])) {\n        return args.pop(); // modify the args array!\n    }\n};\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nMethod.prototype.validateArgs = function (args) {\n    if (args.length !== this.params) {\n        throw errors.InvalidNumberOfParams(args.length, this.params, this.name);\n    }\n};\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nMethod.prototype.formatInput = function (args) {\n    var _this = this;\n    if (!this.inputFormatter) {\n        return args;\n    }\n    return this.inputFormatter.map(function (formatter, index) {\n        // bind this for defaultBlock, and defaultAccount\n        return formatter ? formatter.call(_this, args[index]) : args[index];\n    });\n};\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nMethod.prototype.formatOutput = function (result) {\n    var _this = this;\n    if (_.isArray(result)) {\n        return result.map(function (res) {\n            return _this.outputFormatter && res ? _this.outputFormatter(res) : res;\n        });\n    }\n    else {\n        return this.outputFormatter && result ? this.outputFormatter(result) : result;\n    }\n};\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nMethod.prototype.toPayload = function (args) {\n    var call = this.getCall(args);\n    var callback = this.extractCallback(args);\n    var params = this.formatInput(args);\n    this.validateArgs(params);\n    var payload = {\n        method: call,\n        params: params,\n        callback: callback\n    };\n    if (this.transformPayload) {\n        payload = this.transformPayload(payload);\n    }\n    return payload;\n};\nMethod.prototype._confirmTransaction = function (defer, result, payload) {\n    var method = this, promiseResolved = false, canUnsubscribe = true, timeoutCount = 0, confirmationCount = 0, intervalId = null, lastBlock = null, receiptJSON = '', gasProvided = (_.isObject(payload.params[0]) && payload.params[0].gas) ? payload.params[0].gas : null, isContractDeployment = _.isObject(payload.params[0]) &&\n        payload.params[0].data &&\n        payload.params[0].from &&\n        !payload.params[0].to, hasBytecode = isContractDeployment && payload.params[0].data.length > 2;\n    // add custom send Methods\n    var _ethereumCalls = [\n        new Method({\n            name: 'getBlockByNumber',\n            call: 'eth_getBlockByNumber',\n            params: 2,\n            inputFormatter: [formatters.inputBlockNumberFormatter, function (val) {\n                    return !!val;\n                }],\n            outputFormatter: formatters.outputBlockFormatter\n        }),\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'eth_getTransactionReceipt',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatters.outputTransactionReceiptFormatter\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'eth_getCode',\n            params: 2,\n            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n        }),\n        new Method({\n            name: 'getTransactionByHash',\n            call: 'eth_getTransactionByHash',\n            params: 1,\n            inputFormatter: [null],\n            outputFormatter: formatters.outputTransactionFormatter\n        }),\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'eth',\n            subscriptions: {\n                'newBlockHeaders': {\n                    subscriptionName: 'newHeads',\n                    params: 0,\n                    outputFormatter: formatters.outputBlockFormatter\n                }\n            }\n        })\n    ];\n    // attach methods to this._ethereumCall\n    var _ethereumCall = {};\n    _.each(_ethereumCalls, function (mthd) {\n        mthd.attachToObject(_ethereumCall);\n        mthd.requestManager = method.requestManager; // assign rather than call setRequestManager()\n    });\n    // fire \"receipt\" and confirmation events and resolve after\n    var checkConfirmation = function (existingReceipt, isPolling, err, blockHeader, sub) {\n        if (!err) {\n            // create fake unsubscribe\n            if (!sub) {\n                sub = {\n                    unsubscribe: function () {\n                        clearInterval(intervalId);\n                    }\n                };\n            }\n            // if we have a valid receipt we don't need to send a request\n            return (existingReceipt ? promiEvent.resolve(existingReceipt) : _ethereumCall.getTransactionReceipt(result))\n                // catch error from requesting receipt\n                .catch(function (err) {\n                sub.unsubscribe();\n                promiseResolved = true;\n                utils._fireError({\n                    message: 'Failed to check for transaction receipt:',\n                    data: err\n                }, defer.eventEmitter, defer.reject);\n            })\n                // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n                .then(async function (receipt) {\n                if (!receipt || !receipt.blockHash) {\n                    throw new Error('Receipt missing or blockHash null');\n                }\n                // apply extra formatters\n                if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n                    receipt = method.extraFormatters.receiptFormatter(receipt);\n                }\n                // check if confirmation listener exists\n                if (defer.eventEmitter.listeners('confirmation').length > 0) {\n                    var block;\n                    // If there was an immediately retrieved receipt, it's already\n                    // been confirmed by the direct call to checkConfirmation needed\n                    // for parity instant-seal\n                    if (existingReceipt === undefined || confirmationCount !== 0) {\n                        // Get latest block to emit with confirmation\n                        var latestBlock = await _ethereumCall.getBlockByNumber('latest');\n                        var latestBlockHash = latestBlock ? latestBlock.hash : null;\n                        if (isPolling) { // Check if actually a new block is existing on polling\n                            if (lastBlock) {\n                                block = await _ethereumCall.getBlockByNumber(lastBlock.number + 1);\n                                if (block) {\n                                    lastBlock = block;\n                                    defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                                }\n                            }\n                            else {\n                                block = await _ethereumCall.getBlockByNumber(receipt.blockNumber);\n                                lastBlock = block;\n                                defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                            }\n                        }\n                        else {\n                            defer.eventEmitter.emit('confirmation', confirmationCount, receipt, latestBlockHash);\n                        }\n                    }\n                    if ((isPolling && block) || !isPolling) {\n                        confirmationCount++;\n                    }\n                    canUnsubscribe = false;\n                    if (confirmationCount === method.transactionConfirmationBlocks + 1) { // add 1 so we account for conf 0\n                        sub.unsubscribe();\n                        defer.eventEmitter.removeAllListeners();\n                    }\n                }\n                return receipt;\n            })\n                // CHECK for CONTRACT DEPLOYMENT\n                .then(async function (receipt) {\n                if (isContractDeployment && !promiseResolved) {\n                    if (!receipt.contractAddress) {\n                        if (canUnsubscribe) {\n                            sub.unsubscribe();\n                            promiseResolved = true;\n                        }\n                        utils._fireError(errors.NoContractAddressFoundError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                        return;\n                    }\n                    var code;\n                    try {\n                        code = await _ethereumCall.getCode(receipt.contractAddress);\n                    }\n                    catch (err) {\n                        // ignore;\n                    }\n                    if (!code) {\n                        return;\n                    }\n                    // If deployment is status.true and there was a real\n                    // bytecode string, assume it was successful.\n                    var deploymentSuccess = receipt.status === true && hasBytecode;\n                    if (deploymentSuccess || code.length > 2) {\n                        defer.eventEmitter.emit('receipt', receipt);\n                        // if contract, return instance instead of receipt\n                        if (method.extraFormatters && method.extraFormatters.contractDeployFormatter) {\n                            defer.resolve(method.extraFormatters.contractDeployFormatter(receipt));\n                        }\n                        else {\n                            defer.resolve(receipt);\n                        }\n                        // need to remove listeners, as they aren't removed automatically when succesfull\n                        if (canUnsubscribe) {\n                            defer.eventEmitter.removeAllListeners();\n                        }\n                    }\n                    else {\n                        utils._fireError(errors.ContractCodeNotStoredError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                    }\n                    if (canUnsubscribe) {\n                        sub.unsubscribe();\n                    }\n                    promiseResolved = true;\n                }\n                return receipt;\n            })\n                // CHECK for normal tx check for receipt only\n                .then(async function (receipt) {\n                if (!isContractDeployment && !promiseResolved) {\n                    if (!receipt.outOfGas &&\n                        (!gasProvided || gasProvided !== receipt.gasUsed) &&\n                        (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {\n                        defer.eventEmitter.emit('receipt', receipt);\n                        defer.resolve(receipt);\n                        // need to remove listeners, as they aren't removed automatically when succesfull\n                        if (canUnsubscribe) {\n                            defer.eventEmitter.removeAllListeners();\n                        }\n                    }\n                    else {\n                        receiptJSON = JSON.stringify(receipt, null, 2);\n                        if (receipt.status === false || receipt.status === '0x0') {\n                            try {\n                                var revertMessage = null;\n                                if (method.handleRevert &&\n                                    (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction')) {\n                                    var txReplayOptions = payload.params[0];\n                                    // If send was raw, fetch the transaction and reconstitute the\n                                    // original params so they can be replayed with `eth_call`\n                                    if (method.call === 'eth_sendRawTransaction') {\n                                        var rawTransactionHex = payload.params[0];\n                                        var parsedTx = EthersTransactionUtils.parse(rawTransactionHex);\n                                        txReplayOptions = formatters.inputTransactionFormatter({\n                                            data: parsedTx.data,\n                                            to: parsedTx.to,\n                                            from: parsedTx.from,\n                                            gas: parsedTx.gasLimit.toHexString(),\n                                            gasPrice: parsedTx.gasPrice.toHexString(),\n                                            value: parsedTx.value.toHexString()\n                                        });\n                                    }\n                                    // Get revert reason string with eth_call\n                                    revertMessage = await method.getRevertReason(txReplayOptions, receipt.blockNumber);\n                                    if (revertMessage) { // Only throw a revert error if a revert reason is existing\n                                        utils._fireError(errors.TransactionRevertInstructionError(revertMessage.reason, revertMessage.signature, receipt), defer.eventEmitter, defer.reject, null, receipt);\n                                    }\n                                    else {\n                                        throw false; // Throw false and let the try/catch statement handle the error correctly after\n                                    }\n                                }\n                                else {\n                                    throw false; // Throw false and let the try/catch statement handle the error correctly after\n                                }\n                            }\n                            catch (error) {\n                                // Throw an normal revert error if no revert reason is given or the detection of it is disabled\n                                utils._fireError(errors.TransactionRevertedWithoutReasonError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                            }\n                        }\n                        else {\n                            // Throw OOG if status is not existing and provided gas and used gas are equal\n                            utils._fireError(errors.TransactionOutOfGasError(receipt), defer.eventEmitter, defer.reject, null, receipt);\n                        }\n                    }\n                    if (canUnsubscribe) {\n                        sub.unsubscribe();\n                    }\n                    promiseResolved = true;\n                }\n            })\n                // time out the transaction if not mined after 50 blocks\n                .catch(function () {\n                timeoutCount++;\n                // check to see if we are http polling\n                if (!!isPolling) {\n                    // polling timeout is different than transactionBlockTimeout blocks since we are triggering every second\n                    if (timeoutCount - 1 >= method.transactionPollingTimeout) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(errors.TransactionError('Transaction was not mined within ' + method.transactionPollingTimeout + ' seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                }\n                else {\n                    if (timeoutCount - 1 >= method.transactionBlockTimeout) {\n                        sub.unsubscribe();\n                        promiseResolved = true;\n                        utils._fireError(errors.TransactionError('Transaction was not mined within ' + method.transactionBlockTimeout + ' blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n                    }\n                }\n            });\n        }\n        else {\n            sub.unsubscribe();\n            promiseResolved = true;\n            utils._fireError({\n                message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.',\n                data: err\n            }, defer.eventEmitter, defer.reject);\n        }\n    };\n    // start watching for confirmation depending on the support features of the provider\n    var startWatching = function (existingReceipt) {\n        const startInterval = () => {\n            intervalId = setInterval(checkConfirmation.bind(null, existingReceipt, true), 1000);\n        };\n        if (!this.requestManager.provider.on) {\n            startInterval();\n        }\n        else {\n            _ethereumCall.subscribe('newBlockHeaders', function (err, blockHeader, sub) {\n                if (err || !blockHeader) {\n                    // fall back to polling\n                    startInterval();\n                }\n                else {\n                    checkConfirmation(existingReceipt, false, err, blockHeader, sub);\n                }\n            });\n        }\n    }.bind(this);\n    // first check if we already have a confirmed transaction\n    _ethereumCall.getTransactionReceipt(result)\n        .then(function (receipt) {\n        if (receipt && receipt.blockHash) {\n            if (defer.eventEmitter.listeners('confirmation').length > 0) {\n                // We must keep on watching for new Blocks, if a confirmation listener is present\n                startWatching(receipt);\n            }\n            checkConfirmation(receipt, false);\n        }\n        else if (!promiseResolved) {\n            startWatching();\n        }\n    })\n        .catch(function () {\n        if (!promiseResolved)\n            startWatching();\n    });\n};\nvar getWallet = function (from, accounts) {\n    var wallet = null;\n    // is index given\n    if (_.isNumber(from)) {\n        wallet = accounts.wallet[from];\n        // is account given\n    }\n    else if (_.isObject(from) && from.address && from.privateKey) {\n        wallet = from;\n        // search in wallet for address\n    }\n    else {\n        wallet = accounts.wallet[from.toLowerCase()];\n    }\n    return wallet;\n};\nMethod.prototype.buildCall = function () {\n    var method = this, isSendTx = (method.call === 'eth_sendTransaction' || method.call === 'eth_sendRawTransaction'), // || method.call === 'personal_sendTransaction'\n    isCall = (method.call === 'eth_call');\n    // actual send function\n    var send = function () {\n        var defer = promiEvent(!isSendTx), payload = method.toPayload(Array.prototype.slice.call(arguments));\n        // CALLBACK function\n        var sendTxCallback = function (err, result) {\n            if (method.handleRevert && isCall && method.abiCoder) {\n                var reasonData;\n                // Ganache / Geth <= 1.9.13 return the reason data as a successful eth_call response\n                // Geth >= 1.9.15 attaches the reason data to an error object.\n                // Geth 1.9.14 is missing revert reason (https://github.com/ethereum/web3.js/issues/3520)\n                if (!err && method.isRevertReasonString(result)) {\n                    reasonData = result.substring(10);\n                }\n                else if (err && err.data) {\n                    reasonData = err.data.substring(10);\n                }\n                if (reasonData) {\n                    var reason = method.abiCoder.decodeParameter('string', '0x' + reasonData);\n                    var signature = 'Error(String)';\n                    utils._fireError(errors.RevertInstructionError(reason, signature), defer.eventEmitter, defer.reject, payload.callback, {\n                        reason: reason,\n                        signature: signature\n                    });\n                    return;\n                }\n            }\n            try {\n                result = method.formatOutput(result);\n            }\n            catch (e) {\n                err = e;\n            }\n            if (result instanceof Error) {\n                err = result;\n            }\n            if (!err) {\n                if (payload.callback) {\n                    payload.callback(null, result);\n                }\n            }\n            else {\n                if (err.error) {\n                    err = err.error;\n                }\n                return utils._fireError(err, defer.eventEmitter, defer.reject, payload.callback);\n            }\n            // return PROMISE\n            if (!isSendTx) {\n                if (!err) {\n                    defer.resolve(result);\n                }\n                // return PROMIEVENT\n            }\n            else {\n                defer.eventEmitter.emit('transactionHash', result);\n                method._confirmTransaction(defer, result, payload);\n            }\n        };\n        // SENDS the SIGNED SIGNATURE\n        var sendSignedTx = function (sign) {\n            var signedPayload = _.extend({}, payload, {\n                method: 'eth_sendRawTransaction',\n                params: [sign.rawTransaction]\n            });\n            method.requestManager.send(signedPayload, sendTxCallback);\n        };\n        var sendRequest = function (payload, method) {\n            if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n                var wallet;\n                // ETH_SENDTRANSACTION\n                if (payload.method === 'eth_sendTransaction') {\n                    var tx = payload.params[0];\n                    wallet = getWallet((_.isObject(tx)) ? tx.from : null, method.accounts);\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        var txOptions = _.omit(tx, 'from');\n                        if (method.defaultChain && !txOptions.chain) {\n                            txOptions.chain = method.defaultChain;\n                        }\n                        if (method.defaultHardfork && !txOptions.hardfork) {\n                            txOptions.hardfork = method.defaultHardfork;\n                        }\n                        if (method.defaultCommon && !txOptions.common) {\n                            txOptions.common = method.defaultCommon;\n                        }\n                        method.accounts.signTransaction(txOptions, wallet.privateKey)\n                            .then(sendSignedTx)\n                            .catch(function (err) {\n                            if (_.isFunction(defer.eventEmitter.listeners) && defer.eventEmitter.listeners('error').length) {\n                                try {\n                                    defer.eventEmitter.emit('error', err);\n                                }\n                                catch (err) {\n                                    // Ignore userland error prevent it to bubble up within web3.\n                                }\n                                defer.eventEmitter.removeAllListeners();\n                                defer.eventEmitter.catch(function () {\n                                });\n                            }\n                            defer.reject(err);\n                        });\n                        return;\n                    }\n                    // ETH_SIGN\n                }\n                else if (payload.method === 'eth_sign') {\n                    var data = payload.params[1];\n                    wallet = getWallet(payload.params[0], method.accounts);\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    if (wallet && wallet.privateKey) {\n                        var sign = method.accounts.sign(data, wallet.privateKey);\n                        if (payload.callback) {\n                            payload.callback(null, sign.signature);\n                        }\n                        defer.resolve(sign.signature);\n                        return;\n                    }\n                }\n            }\n            return method.requestManager.send(payload, sendTxCallback);\n        };\n        // Send the actual transaction\n        if (isSendTx && _.isObject(payload.params[0]) && typeof payload.params[0].gasPrice === 'undefined') {\n            var getGasPrice = (new Method({\n                name: 'getGasPrice',\n                call: 'eth_gasPrice',\n                params: 0\n            })).createFunction(method.requestManager);\n            getGasPrice(function (err, gasPrice) {\n                if (gasPrice) {\n                    payload.params[0].gasPrice = gasPrice;\n                }\n                if (isSendTx) {\n                    setTimeout(() => {\n                        defer.eventEmitter.emit('sending', payload);\n                    }, 0);\n                }\n                sendRequest(payload, method);\n            });\n        }\n        else {\n            if (isSendTx) {\n                setTimeout(() => {\n                    defer.eventEmitter.emit('sending', payload);\n                }, 0);\n            }\n            sendRequest(payload, method);\n        }\n        if (isSendTx) {\n            setTimeout(() => {\n                defer.eventEmitter.emit('sent', payload);\n            }, 0);\n        }\n        return defer.eventEmitter;\n    };\n    // necessary to attach things to the method\n    send.method = method;\n    // necessary for batch requests\n    send.request = this.request.bind(this);\n    return send;\n};\n/**\n * Returns the revert reason string if existing or otherwise false.\n *\n * @method getRevertReason\n *\n * @param {Object} txOptions\n * @param {Number} blockNumber\n *\n * @returns {Promise<Boolean|String>}\n */\nMethod.prototype.getRevertReason = function (txOptions, blockNumber) {\n    var self = this;\n    return new Promise(function (resolve, reject) {\n        (new Method({\n            name: 'call',\n            call: 'eth_call',\n            params: 2,\n            abiCoder: self.abiCoder,\n            handleRevert: true\n        }))\n            .createFunction(self.requestManager)(txOptions, utils.numberToHex(blockNumber))\n            .then(function () {\n            resolve(false);\n        })\n            .catch(function (error) {\n            if (error.reason) {\n                resolve({\n                    reason: error.reason,\n                    signature: error.signature\n                });\n            }\n            else {\n                reject(error);\n            }\n        });\n    });\n};\n/**\n * Checks if the given hex string is a revert message from the EVM\n *\n * @method isRevertReasonString\n *\n * @param {String} data - Hex string prefixed with 0x\n *\n * @returns {Boolean}\n */\nMethod.prototype.isRevertReasonString = function (data) {\n    return _.isString(data) && ((data.length - 2) / 2) % 32 === 4 && data.substring(0, 10) === '0x08c379a0';\n};\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\nMethod.prototype.request = function () {\n    var payload = this.toPayload(Array.prototype.slice.call(arguments));\n    payload.format = this.formatOutput.bind(this);\n    return payload;\n};\nmodule.exports = Method;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
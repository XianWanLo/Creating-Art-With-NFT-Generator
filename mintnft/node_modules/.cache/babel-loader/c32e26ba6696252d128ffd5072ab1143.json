{"ast":null,"code":"import { __read, __spread, __values } from \"tslib\";\nimport { isResponse } from \"../types\";\nexport function makeWebSocketSender(ws) {\n  var contextsById = new Map();\n  ws.addEventListener(\"message\", function (message) {\n    var response = JSON.parse(message.data);\n\n    if (!isResponse(response)) {\n      return;\n    }\n\n    var id = getIdFromResponse(response);\n\n    if (id === undefined) {\n      return;\n    }\n\n    var context = contextsById.get(id);\n\n    if (!context) {\n      return;\n    }\n\n    var resolve = context.resolve;\n    contextsById.delete(id);\n\n    if (!Array.isArray(response) && response.error && response.error.code === 429) {\n      resolve({\n        type: \"rateLimit\"\n      });\n    } else {\n      resolve({\n        response: response,\n        type: \"jsonrpc\"\n      });\n    }\n  });\n  ws.addEventListener(\"down\", function () {\n    __spread(contextsById).forEach(function (_a) {\n      var _b = __read(_a, 2),\n          id = _b[0],\n          _c = _b[1],\n          request = _c.request,\n          resolve = _c.resolve;\n\n      if (isWrite(request)) {\n        // Writes cannot be resent because they will fail for a duplicate nonce.\n        contextsById.delete(id);\n        resolve({\n          type: \"networkError\",\n          status: 0,\n          message: \"WebSocket closed before receiving a response for write request with id: \" + id + \".\"\n        });\n      }\n    });\n  });\n  ws.addEventListener(\"reopen\", function () {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(contextsById.values()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var request = _c.value.request;\n        ws.send(JSON.stringify(request));\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  });\n  return function (request) {\n    return new Promise(function (resolve) {\n      var id = getIdFromRequest(request);\n\n      if (id !== undefined) {\n        var existingContext = contextsById.get(id);\n\n        if (existingContext) {\n          var message = \"Another WebSocket request was made with the same id (\" + id + \") before a response was received.\";\n          console.error(message);\n          existingContext.resolve({\n            message: message,\n            type: \"networkError\",\n            status: 0\n          });\n        }\n\n        contextsById.set(id, {\n          request: request,\n          resolve: resolve\n        });\n      }\n\n      ws.send(JSON.stringify(request));\n    });\n  };\n}\n\nfunction getIdFromRequest(request) {\n  if (!Array.isArray(request)) {\n    return request.id;\n  }\n\n  return getCanonicalIdFromList(request.map(function (p) {\n    return p.id;\n  }));\n}\n\nfunction getIdFromResponse(response) {\n  if (!Array.isArray(response)) {\n    return response.id;\n  }\n\n  return getCanonicalIdFromList(response.map(function (p) {\n    return p.id;\n  }));\n}\n/**\n * Since the JSON-RPC spec allows responses to be returned in a different order\n * than sent, we need a mechanism for choosing a canonical id from a list that\n * doesn't depend on the order. This chooses the \"minimum\" id by an arbitrary\n * ordering: the smallest string if possible, otherwise the smallest number,\n * otherwise null.\n */\n\n\nfunction getCanonicalIdFromList(ids) {\n  var stringIds = ids.filter(function (id) {\n    return typeof id === \"string\";\n  });\n\n  if (stringIds.length > 0) {\n    return stringIds.reduce(function (bestId, id) {\n      return bestId < id ? bestId : id;\n    });\n  }\n\n  var numberIds = ids.filter(function (id) {\n    return typeof id === \"number\";\n  });\n\n  if (numberIds.length > 0) {\n    return Math.min.apply(Math, __spread(numberIds));\n  }\n\n  return ids.indexOf(null) >= 0 ? null : undefined;\n}\n\nfunction isWrite(request) {\n  return Array.isArray(request) ? request.every(isSingleWrite) : isSingleWrite(request);\n}\n\nvar WRITE_METHODS = [\"eth_sendTransaction\", \"eth_sendRawTransaction\"];\n\nfunction isSingleWrite(request) {\n  return WRITE_METHODS.includes(request.method);\n}","map":{"version":3,"mappings":"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","names":["isResponse","makeWebSocketSender","ws","contextsById","Map","addEventListener","response","JSON","parse","message","data","id","getIdFromResponse","undefined","context","get","delete","Array","isArray","error","code","resolve","type","__spread","forEach","_a","_b","_c","request","isWrite","status","values","send","stringify","Promise","getIdFromRequest","existingContext","console","set","getCanonicalIdFromList","map","ids","stringIds","filter","length","reduce","bestId","numberIds","Math","min","apply","indexOf","every","isSingleWrite","WRITE_METHODS","includes","method"],"sourceRoot":"","sources":["../../../src/web3-adapter/alchemySendWebSocket.ts"],"sourcesContent":["import SturdyWebSocket from \"sturdy-websocket\";\nimport {\n  isResponse,\n  JsonRpcId,\n  JsonRpcRequest,\n  SingleOrBatchRequest,\n  SingleOrBatchResponse,\n  WebSocketMessage,\n} from \"../types\";\nimport { AlchemySendFunction, AlchemySendResult } from \"./alchemySend\";\n\ninterface RequestContext {\n  request: SingleOrBatchRequest;\n  resolve(response: AlchemySendResult): void;\n}\n\nexport function makeWebSocketSender(ws: SturdyWebSocket): AlchemySendFunction {\n  const contextsById = new Map<JsonRpcId, RequestContext>();\n  ws.addEventListener(\"message\", message => {\n    const response: WebSocketMessage = JSON.parse(message.data);\n    if (!isResponse(response)) {\n      return;\n    }\n    const id = getIdFromResponse(response);\n    if (id === undefined) {\n      return;\n    }\n    const context = contextsById.get(id);\n    if (!context) {\n      return;\n    }\n    const { resolve } = context;\n    contextsById.delete(id);\n    if (\n      !Array.isArray(response) &&\n      response.error &&\n      response.error.code === 429\n    ) {\n      resolve({ type: \"rateLimit\" });\n    } else {\n      resolve({ response, type: \"jsonrpc\" });\n    }\n  });\n  ws.addEventListener(\"down\", () => {\n    [...contextsById].forEach(([id, { request, resolve }]) => {\n      if (isWrite(request)) {\n        // Writes cannot be resent because they will fail for a duplicate nonce.\n        contextsById.delete(id);\n        resolve({\n          type: \"networkError\",\n          status: 0,\n          message: `WebSocket closed before receiving a response for write request with id: ${id}.`,\n        });\n      }\n    });\n  });\n  ws.addEventListener(\"reopen\", () => {\n    for (const { request } of contextsById.values()) {\n      ws.send(JSON.stringify(request));\n    }\n  });\n\n  return request =>\n    new Promise(resolve => {\n      const id = getIdFromRequest(request);\n      if (id !== undefined) {\n        const existingContext = contextsById.get(id);\n        if (existingContext) {\n          const message = `Another WebSocket request was made with the same id (${id}) before a response was received.`;\n          console.error(message);\n          existingContext.resolve({\n            message,\n            type: \"networkError\",\n            status: 0,\n          });\n        }\n        contextsById.set(id, { request, resolve });\n      }\n      ws.send(JSON.stringify(request));\n    });\n}\n\nfunction getIdFromRequest(\n  request: SingleOrBatchRequest,\n): JsonRpcId | undefined {\n  if (!Array.isArray(request)) {\n    return request.id;\n  }\n  return getCanonicalIdFromList(request.map(p => p.id));\n}\n\nfunction getIdFromResponse(\n  response: SingleOrBatchResponse,\n): JsonRpcId | undefined {\n  if (!Array.isArray(response)) {\n    return response.id;\n  }\n  return getCanonicalIdFromList(response.map(p => p.id));\n}\n\n/**\n * Since the JSON-RPC spec allows responses to be returned in a different order\n * than sent, we need a mechanism for choosing a canonical id from a list that\n * doesn't depend on the order. This chooses the \"minimum\" id by an arbitrary\n * ordering: the smallest string if possible, otherwise the smallest number,\n * otherwise null.\n */\nfunction getCanonicalIdFromList(\n  ids: Array<JsonRpcId | undefined>,\n): JsonRpcId | undefined {\n  const stringIds: string[] = ids.filter(id => typeof id === \"string\") as any;\n  if (stringIds.length > 0) {\n    return stringIds.reduce((bestId, id) => (bestId < id ? bestId : id));\n  }\n  const numberIds: number[] = ids.filter(id => typeof id === \"number\") as any;\n  if (numberIds.length > 0) {\n    return Math.min(...numberIds);\n  }\n  return ids.indexOf(null) >= 0 ? null : undefined;\n}\n\nfunction isWrite(request: SingleOrBatchRequest): boolean {\n  return Array.isArray(request)\n    ? request.every(isSingleWrite)\n    : isSingleWrite(request);\n}\n\nconst WRITE_METHODS = [\"eth_sendTransaction\", \"eth_sendRawTransaction\"];\n\nfunction isSingleWrite(request: JsonRpcRequest): boolean {\n  return WRITE_METHODS.includes(request.method);\n}\n"]},"metadata":{},"sourceType":"module"}
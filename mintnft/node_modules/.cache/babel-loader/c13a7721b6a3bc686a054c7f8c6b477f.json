{"ast":null,"code":"'use strict';\n\nvar isHexPrefixed = require('is-hex-prefixed');\n\nvar stripHexPrefix = require('strip-hex-prefix');\n/**\n * Pads a `String` to have an even length\n * @param {String} value\n * @return {String} output\n */\n\n\nfunction padToEven(value) {\n  var a = value; // eslint-disable-line\n\n  if (typeof a !== 'string') {\n    throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');\n  }\n\n  if (a.length % 2) {\n    a = '0' + a;\n  }\n\n  return a;\n}\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\n\n\nfunction intToHex(i) {\n  var hex = i.toString(16); // eslint-disable-line\n\n  return '0x' + hex;\n}\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\n\n\nfunction intToBuffer(i) {\n  var hex = intToHex(i);\n  return new Buffer(padToEven(hex.slice(2)), 'hex');\n}\n/**\n * Get the binary size of a string\n * @param {String} str\n * @return {Number}\n */\n\n\nfunction getBinarySize(str) {\n  if (typeof str !== 'string') {\n    throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \\'str\\' to be type String, got \\'' + typeof str + '\\'.');\n  }\n\n  return Buffer.byteLength(str, 'utf8');\n}\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param {array} superset\n * @param {array} subset\n *\n * @returns {boolean}\n */\n\n\nfunction arrayContainsArray(superset, subset, some) {\n  if (Array.isArray(superset) !== true) {\n    throw new Error('[ethjs-util] method arrayContainsArray requires input \\'superset\\' to be an array got type \\'' + typeof superset + '\\'');\n  }\n\n  if (Array.isArray(subset) !== true) {\n    throw new Error('[ethjs-util] method arrayContainsArray requires input \\'subset\\' to be an array got type \\'' + typeof subset + '\\'');\n  }\n\n  return subset[Boolean(some) && 'some' || 'every'](function (value) {\n    return superset.indexOf(value) >= 0;\n  });\n}\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method toUtf8\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\n\n\nfunction toUtf8(hex) {\n  var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');\n  return bufferValue.toString('utf8');\n}\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method toAscii\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\n\n\nfunction toAscii(hex) {\n  var str = ''; // eslint-disable-line\n\n  var i = 0,\n      l = hex.length; // eslint-disable-line\n\n  if (hex.substring(0, 2) === '0x') {\n    i = 2;\n  }\n\n  for (; i < l; i += 2) {\n    var code = parseInt(hex.substr(i, 2), 16);\n    str += String.fromCharCode(code);\n  }\n\n  return str;\n}\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method fromUtf8\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\n\n\nfunction fromUtf8(stringValue) {\n  var str = new Buffer(stringValue, 'utf8');\n  return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');\n}\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method fromAscii\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\n\n\nfunction fromAscii(stringValue) {\n  var hex = ''; // eslint-disable-line\n\n  for (var i = 0; i < stringValue.length; i++) {\n    // eslint-disable-line\n    var code = stringValue.charCodeAt(i);\n    var n = code.toString(16);\n    hex += n.length < 2 ? '0' + n : n;\n  }\n\n  return '0x' + hex;\n}\n/**\n * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]\n *\n * @method getKeys get specific key from inner object array of objects\n * @param {String} params\n * @param {String} key\n * @param {Boolean} allowEmpty\n * @returns {Array} output just a simple array of output keys\n */\n\n\nfunction getKeys(params, key, allowEmpty) {\n  if (!Array.isArray(params)) {\n    throw new Error('[ethjs-util] method getKeys expecting type Array as \\'params\\' input, got \\'' + typeof params + '\\'');\n  }\n\n  if (typeof key !== 'string') {\n    throw new Error('[ethjs-util] method getKeys expecting type String for input \\'key\\' got \\'' + typeof key + '\\'.');\n  }\n\n  var result = []; // eslint-disable-line\n\n  for (var i = 0; i < params.length; i++) {\n    // eslint-disable-line\n    var value = params[i][key]; // eslint-disable-line\n\n    if (allowEmpty && !value) {\n      value = '';\n    } else if (typeof value !== 'string') {\n      throw new Error('invalid abi');\n    }\n\n    result.push(value);\n  }\n\n  return result;\n}\n/**\n * Is the string a hex string.\n *\n * @method check if string is hex string of specific length\n * @param {String} value\n * @param {Number} length\n * @returns {Boolean} output the string is a hex string\n */\n\n\nfunction isHexString(value, length) {\n  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nmodule.exports = {\n  arrayContainsArray: arrayContainsArray,\n  intToBuffer: intToBuffer,\n  getBinarySize: getBinarySize,\n  isHexPrefixed: isHexPrefixed,\n  stripHexPrefix: stripHexPrefix,\n  padToEven: padToEven,\n  intToHex: intToHex,\n  fromAscii: fromAscii,\n  fromUtf8: fromUtf8,\n  toAscii: toAscii,\n  toUtf8: toUtf8,\n  getKeys: getKeys,\n  isHexString: isHexString\n};","map":{"version":3,"names":["isHexPrefixed","require","stripHexPrefix","padToEven","value","a","Error","length","intToHex","i","hex","toString","intToBuffer","Buffer","slice","getBinarySize","str","byteLength","arrayContainsArray","superset","subset","some","Array","isArray","Boolean","indexOf","toUtf8","bufferValue","replace","toAscii","l","substring","code","parseInt","substr","String","fromCharCode","fromUtf8","stringValue","fromAscii","charCodeAt","n","getKeys","params","key","allowEmpty","result","push","isHexString","match","module","exports"],"sources":["C:/Users/x7491/Creating-Art-With-NFT-Generator/mintnft/node_modules/ethjs-util/lib/index.js"],"sourcesContent":["'use strict';\n\nvar isHexPrefixed = require('is-hex-prefixed');\nvar stripHexPrefix = require('strip-hex-prefix');\n\n/**\n * Pads a `String` to have an even length\n * @param {String} value\n * @return {String} output\n */\nfunction padToEven(value) {\n  var a = value; // eslint-disable-line\n\n  if (typeof a !== 'string') {\n    throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');\n  }\n\n  if (a.length % 2) {\n    a = '0' + a;\n  }\n\n  return a;\n}\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nfunction intToHex(i) {\n  var hex = i.toString(16); // eslint-disable-line\n\n  return '0x' + hex;\n}\n\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nfunction intToBuffer(i) {\n  var hex = intToHex(i);\n\n  return new Buffer(padToEven(hex.slice(2)), 'hex');\n}\n\n/**\n * Get the binary size of a string\n * @param {String} str\n * @return {Number}\n */\nfunction getBinarySize(str) {\n  if (typeof str !== 'string') {\n    throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \\'str\\' to be type String, got \\'' + typeof str + '\\'.');\n  }\n\n  return Buffer.byteLength(str, 'utf8');\n}\n\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param {array} superset\n * @param {array} subset\n *\n * @returns {boolean}\n */\nfunction arrayContainsArray(superset, subset, some) {\n  if (Array.isArray(superset) !== true) {\n    throw new Error('[ethjs-util] method arrayContainsArray requires input \\'superset\\' to be an array got type \\'' + typeof superset + '\\'');\n  }\n  if (Array.isArray(subset) !== true) {\n    throw new Error('[ethjs-util] method arrayContainsArray requires input \\'subset\\' to be an array got type \\'' + typeof subset + '\\'');\n  }\n\n  return subset[Boolean(some) && 'some' || 'every'](function (value) {\n    return superset.indexOf(value) >= 0;\n  });\n}\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method toUtf8\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nfunction toUtf8(hex) {\n  var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');\n\n  return bufferValue.toString('utf8');\n}\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method toAscii\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nfunction toAscii(hex) {\n  var str = ''; // eslint-disable-line\n  var i = 0,\n      l = hex.length; // eslint-disable-line\n\n  if (hex.substring(0, 2) === '0x') {\n    i = 2;\n  }\n\n  for (; i < l; i += 2) {\n    var code = parseInt(hex.substr(i, 2), 16);\n    str += String.fromCharCode(code);\n  }\n\n  return str;\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method fromUtf8\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nfunction fromUtf8(stringValue) {\n  var str = new Buffer(stringValue, 'utf8');\n\n  return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method fromAscii\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nfunction fromAscii(stringValue) {\n  var hex = ''; // eslint-disable-line\n  for (var i = 0; i < stringValue.length; i++) {\n    // eslint-disable-line\n    var code = stringValue.charCodeAt(i);\n    var n = code.toString(16);\n    hex += n.length < 2 ? '0' + n : n;\n  }\n\n  return '0x' + hex;\n}\n\n/**\n * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]\n *\n * @method getKeys get specific key from inner object array of objects\n * @param {String} params\n * @param {String} key\n * @param {Boolean} allowEmpty\n * @returns {Array} output just a simple array of output keys\n */\nfunction getKeys(params, key, allowEmpty) {\n  if (!Array.isArray(params)) {\n    throw new Error('[ethjs-util] method getKeys expecting type Array as \\'params\\' input, got \\'' + typeof params + '\\'');\n  }\n  if (typeof key !== 'string') {\n    throw new Error('[ethjs-util] method getKeys expecting type String for input \\'key\\' got \\'' + typeof key + '\\'.');\n  }\n\n  var result = []; // eslint-disable-line\n\n  for (var i = 0; i < params.length; i++) {\n    // eslint-disable-line\n    var value = params[i][key]; // eslint-disable-line\n    if (allowEmpty && !value) {\n      value = '';\n    } else if (typeof value !== 'string') {\n      throw new Error('invalid abi');\n    }\n    result.push(value);\n  }\n\n  return result;\n}\n\n/**\n * Is the string a hex string.\n *\n * @method check if string is hex string of specific length\n * @param {String} value\n * @param {Number} length\n * @returns {Boolean} output the string is a hex string\n */\nfunction isHexString(value, length) {\n  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nmodule.exports = {\n  arrayContainsArray: arrayContainsArray,\n  intToBuffer: intToBuffer,\n  getBinarySize: getBinarySize,\n  isHexPrefixed: isHexPrefixed,\n  stripHexPrefix: stripHexPrefix,\n  padToEven: padToEven,\n  intToHex: intToHex,\n  fromAscii: fromAscii,\n  fromUtf8: fromUtf8,\n  toAscii: toAscii,\n  toUtf8: toUtf8,\n  getKeys: getKeys,\n  isHexString: isHexString\n};"],"mappings":"AAAA;;AAEA,IAAIA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA3B;;AACA,IAAIC,cAAc,GAAGD,OAAO,CAAC,kBAAD,CAA5B;AAEA;AACA;AACA;AACA;AACA;;;AACA,SAASE,SAAT,CAAmBC,KAAnB,EAA0B;EACxB,IAAIC,CAAC,GAAGD,KAAR,CADwB,CACT;;EAEf,IAAI,OAAOC,CAAP,KAAa,QAAjB,EAA2B;IACzB,MAAM,IAAIC,KAAJ,CAAU,4EAA4E,OAAOD,CAAnF,GAAuF,oBAAjG,CAAN;EACD;;EAED,IAAIA,CAAC,CAACE,MAAF,GAAW,CAAf,EAAkB;IAChBF,CAAC,GAAG,MAAMA,CAAV;EACD;;EAED,OAAOA,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASG,QAAT,CAAkBC,CAAlB,EAAqB;EACnB,IAAIC,GAAG,GAAGD,CAAC,CAACE,QAAF,CAAW,EAAX,CAAV,CADmB,CACO;;EAE1B,OAAO,OAAOD,GAAd;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASE,WAAT,CAAqBH,CAArB,EAAwB;EACtB,IAAIC,GAAG,GAAGF,QAAQ,CAACC,CAAD,CAAlB;EAEA,OAAO,IAAII,MAAJ,CAAWV,SAAS,CAACO,GAAG,CAACI,KAAJ,CAAU,CAAV,CAAD,CAApB,EAAoC,KAApC,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;EAC1B,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;IAC3B,MAAM,IAAIV,KAAJ,CAAU,kHAAkH,OAAOU,GAAzH,GAA+H,KAAzI,CAAN;EACD;;EAED,OAAOH,MAAM,CAACI,UAAP,CAAkBD,GAAlB,EAAuB,MAAvB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,kBAAT,CAA4BC,QAA5B,EAAsCC,MAAtC,EAA8CC,IAA9C,EAAoD;EAClD,IAAIC,KAAK,CAACC,OAAN,CAAcJ,QAAd,MAA4B,IAAhC,EAAsC;IACpC,MAAM,IAAIb,KAAJ,CAAU,kGAAkG,OAAOa,QAAzG,GAAoH,IAA9H,CAAN;EACD;;EACD,IAAIG,KAAK,CAACC,OAAN,CAAcH,MAAd,MAA0B,IAA9B,EAAoC;IAClC,MAAM,IAAId,KAAJ,CAAU,gGAAgG,OAAOc,MAAvG,GAAgH,IAA1H,CAAN;EACD;;EAED,OAAOA,MAAM,CAACI,OAAO,CAACH,IAAD,CAAP,IAAiB,MAAjB,IAA2B,OAA5B,CAAN,CAA2C,UAAUjB,KAAV,EAAiB;IACjE,OAAOe,QAAQ,CAACM,OAAT,CAAiBrB,KAAjB,KAA2B,CAAlC;EACD,CAFM,CAAP;AAGD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASsB,MAAT,CAAgBhB,GAAhB,EAAqB;EACnB,IAAIiB,WAAW,GAAG,IAAId,MAAJ,CAAWV,SAAS,CAACD,cAAc,CAACQ,GAAD,CAAd,CAAoBkB,OAApB,CAA4B,UAA5B,EAAwC,EAAxC,CAAD,CAApB,EAAmE,KAAnE,CAAlB;EAEA,OAAOD,WAAW,CAAChB,QAAZ,CAAqB,MAArB,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkB,OAAT,CAAiBnB,GAAjB,EAAsB;EACpB,IAAIM,GAAG,GAAG,EAAV,CADoB,CACN;;EACd,IAAIP,CAAC,GAAG,CAAR;EAAA,IACIqB,CAAC,GAAGpB,GAAG,CAACH,MADZ,CAFoB,CAGA;;EAEpB,IAAIG,GAAG,CAACqB,SAAJ,CAAc,CAAd,EAAiB,CAAjB,MAAwB,IAA5B,EAAkC;IAChCtB,CAAC,GAAG,CAAJ;EACD;;EAED,OAAOA,CAAC,GAAGqB,CAAX,EAAcrB,CAAC,IAAI,CAAnB,EAAsB;IACpB,IAAIuB,IAAI,GAAGC,QAAQ,CAACvB,GAAG,CAACwB,MAAJ,CAAWzB,CAAX,EAAc,CAAd,CAAD,EAAmB,EAAnB,CAAnB;IACAO,GAAG,IAAImB,MAAM,CAACC,YAAP,CAAoBJ,IAApB,CAAP;EACD;;EAED,OAAOhB,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASqB,QAAT,CAAkBC,WAAlB,EAA+B;EAC7B,IAAItB,GAAG,GAAG,IAAIH,MAAJ,CAAWyB,WAAX,EAAwB,MAAxB,CAAV;EAEA,OAAO,OAAOnC,SAAS,CAACa,GAAG,CAACL,QAAJ,CAAa,KAAb,CAAD,CAAT,CAA+BiB,OAA/B,CAAuC,UAAvC,EAAmD,EAAnD,CAAd;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASW,SAAT,CAAmBD,WAAnB,EAAgC;EAC9B,IAAI5B,GAAG,GAAG,EAAV,CAD8B,CAChB;;EACd,KAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6B,WAAW,CAAC/B,MAAhC,EAAwCE,CAAC,EAAzC,EAA6C;IAC3C;IACA,IAAIuB,IAAI,GAAGM,WAAW,CAACE,UAAZ,CAAuB/B,CAAvB,CAAX;IACA,IAAIgC,CAAC,GAAGT,IAAI,CAACrB,QAAL,CAAc,EAAd,CAAR;IACAD,GAAG,IAAI+B,CAAC,CAAClC,MAAF,GAAW,CAAX,GAAe,MAAMkC,CAArB,GAAyBA,CAAhC;EACD;;EAED,OAAO,OAAO/B,GAAd;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASgC,OAAT,CAAiBC,MAAjB,EAAyBC,GAAzB,EAA8BC,UAA9B,EAA0C;EACxC,IAAI,CAACvB,KAAK,CAACC,OAAN,CAAcoB,MAAd,CAAL,EAA4B;IAC1B,MAAM,IAAIrC,KAAJ,CAAU,iFAAiF,OAAOqC,MAAxF,GAAiG,IAA3G,CAAN;EACD;;EACD,IAAI,OAAOC,GAAP,KAAe,QAAnB,EAA6B;IAC3B,MAAM,IAAItC,KAAJ,CAAU,+EAA+E,OAAOsC,GAAtF,GAA4F,KAAtG,CAAN;EACD;;EAED,IAAIE,MAAM,GAAG,EAAb,CARwC,CAQvB;;EAEjB,KAAK,IAAIrC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGkC,MAAM,CAACpC,MAA3B,EAAmCE,CAAC,EAApC,EAAwC;IACtC;IACA,IAAIL,KAAK,GAAGuC,MAAM,CAAClC,CAAD,CAAN,CAAUmC,GAAV,CAAZ,CAFsC,CAEV;;IAC5B,IAAIC,UAAU,IAAI,CAACzC,KAAnB,EAA0B;MACxBA,KAAK,GAAG,EAAR;IACD,CAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;MACpC,MAAM,IAAIE,KAAJ,CAAU,aAAV,CAAN;IACD;;IACDwC,MAAM,CAACC,IAAP,CAAY3C,KAAZ;EACD;;EAED,OAAO0C,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,WAAT,CAAqB5C,KAArB,EAA4BG,MAA5B,EAAoC;EAClC,IAAI,OAAOH,KAAP,KAAiB,QAAjB,IAA6B,CAACA,KAAK,CAAC6C,KAAN,CAAY,kBAAZ,CAAlC,EAAmE;IACjE,OAAO,KAAP;EACD;;EAED,IAAI1C,MAAM,IAAIH,KAAK,CAACG,MAAN,KAAiB,IAAI,IAAIA,MAAvC,EAA+C;IAC7C,OAAO,KAAP;EACD;;EAED,OAAO,IAAP;AACD;;AAED2C,MAAM,CAACC,OAAP,GAAiB;EACfjC,kBAAkB,EAAEA,kBADL;EAEfN,WAAW,EAAEA,WAFE;EAGfG,aAAa,EAAEA,aAHA;EAIff,aAAa,EAAEA,aAJA;EAKfE,cAAc,EAAEA,cALD;EAMfC,SAAS,EAAEA,SANI;EAOfK,QAAQ,EAAEA,QAPK;EAQf+B,SAAS,EAAEA,SARI;EASfF,QAAQ,EAAEA,QATK;EAUfR,OAAO,EAAEA,OAVM;EAWfH,MAAM,EAAEA,MAXO;EAYfgB,OAAO,EAAEA,OAZM;EAafM,WAAW,EAAEA;AAbE,CAAjB"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import SturdyWebSocket from \"sturdy-websocket\";\nimport { w3cwebsocket } from \"websocket\";\nimport { makePayloadFactory, makeSenders } from \"../util/jsonRpc\";\nimport { VERSION } from \"../version\";\nimport { makeHttpSender } from \"./alchemySendHttp\";\nimport { makeWebSocketSender } from \"./alchemySendWebSocket\";\nimport { makeAlchemyHttpProvider } from \"./httpProvider\";\nimport { makePayloadSender } from \"./sendPayload\";\nimport { AlchemyWebSocketProvider } from \"./webSocketProvider\";\nvar NODE_MAX_WS_FRAME_SIZE = 100 * 1024 * 1024; // 100 MB\n\nexport function makeAlchemyContext(url, config) {\n  var makePayload = makePayloadFactory();\n\n  if (/^https?:\\/\\//.test(url)) {\n    var alchemySend = makeHttpSender(url);\n\n    var _a = makePayloadSender(alchemySend, config, makePayload),\n        sendPayload = _a.sendPayload,\n        setWriteProvider = _a.setWriteProvider;\n\n    var senders = makeSenders(sendPayload, makePayload);\n    var provider = makeAlchemyHttpProvider(sendPayload);\n    return {\n      provider: provider,\n      senders: senders,\n      setWriteProvider: setWriteProvider\n    };\n  } else if (/^wss?:\\/\\//.test(url)) {\n    var protocol = isAlchemyUrl(url) ? \"alchemy-web3-\" + VERSION : undefined;\n    var ws = new SturdyWebSocket(url, protocol, {\n      wsConstructor: getWebSocketConstructor()\n    });\n    var alchemySend = makeWebSocketSender(ws);\n\n    var _b = makePayloadSender(alchemySend, config, makePayload),\n        sendPayload = _b.sendPayload,\n        setWriteProvider = _b.setWriteProvider;\n\n    var senders = makeSenders(sendPayload, makePayload);\n    var provider = new AlchemyWebSocketProvider(ws, sendPayload, senders);\n    return {\n      provider: provider,\n      senders: senders,\n      setWriteProvider: setWriteProvider\n    };\n  } else {\n    throw new Error(\"Alchemy URL protocol must be one of http, https, ws, or wss. Recieved: \" + url);\n  }\n}\n\nfunction getWebSocketConstructor() {\n  return isNodeEnvironment() ? function (url, protocols) {\n    return new w3cwebsocket(url, protocols, undefined, undefined, undefined, {\n      maxReceivedMessageSize: NODE_MAX_WS_FRAME_SIZE,\n      maxReceivedFrameSize: NODE_MAX_WS_FRAME_SIZE\n    });\n  } : WebSocket;\n}\n\nfunction isNodeEnvironment() {\n  return typeof process !== \"undefined\" && process != null && process.versions != null && process.versions.node != null;\n}\n\nfunction isAlchemyUrl(url) {\n  return url.indexOf(\"alchemyapi.io\") >= 0;\n}","map":{"version":3,"mappings":"AAAA,OAAOA,eAAP,MAA4B,kBAA5B;AACA,SAASC,YAAT,QAA6B,WAA7B;AAEA,SAEEC,kBAFF,EAGEC,WAHF,QAIO,iBAJP;AAKA,SAASC,OAAT,QAAwB,YAAxB;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACA,SAASC,mBAAT,QAAoC,wBAApC;AACA,SAASC,uBAAT,QAAwC,gBAAxC;AACA,SAASC,iBAAT,QAAkC,eAAlC;AACA,SAASC,wBAAT,QAAyC,qBAAzC;AAEA,IAAMC,sBAAsB,GAAG,MAAM,IAAN,GAAa,IAA5C,C,CAAkD;;AAQlD,OAAM,SAAUC,kBAAV,CACJC,GADI,EAEJC,MAFI,EAEc;EAElB,IAAMC,WAAW,GAAGZ,kBAAkB,EAAtC;;EACA,IAAI,eAAea,IAAf,CAAoBH,GAApB,CAAJ,EAA8B;IAC5B,IAAMI,WAAW,GAAGX,cAAc,CAACO,GAAD,CAAlC;;IACM,SAAoCJ,iBAAiB,CACzDQ,WADyD,EAEzDH,MAFyD,EAGzDC,WAHyD,CAArD;IAAA,IAAEG,WAAW,iBAAb;IAAA,IAAeC,gBAAgB,sBAA/B;;IAKN,IAAMC,OAAO,GAAGhB,WAAW,CAACc,WAAD,EAAcH,WAAd,CAA3B;IACA,IAAMM,QAAQ,GAAGb,uBAAuB,CAACU,WAAD,CAAxC;IACA,OAAO;MAAEG,QAAQ,UAAV;MAAYD,OAAO,SAAnB;MAAqBD,gBAAgB;IAArC,CAAP;EACD,CAVD,MAUO,IAAI,aAAaH,IAAb,CAAkBH,GAAlB,CAAJ,EAA4B;IACjC,IAAMS,QAAQ,GAAGC,YAAY,CAACV,GAAD,CAAZ,GAAoB,kBAAgBR,OAApC,GAAgDmB,SAAjE;IACA,IAAMC,EAAE,GAAG,IAAIxB,eAAJ,CAAoBY,GAApB,EAAyBS,QAAzB,EAAmC;MAC5CI,aAAa,EAAEC,uBAAuB;IADM,CAAnC,CAAX;IAGA,IAAMV,WAAW,GAAGV,mBAAmB,CAACkB,EAAD,CAAvC;;IACM,SAAoChB,iBAAiB,CACzDQ,WADyD,EAEzDH,MAFyD,EAGzDC,WAHyD,CAArD;IAAA,IAAEG,WAAW,iBAAb;IAAA,IAAeC,gBAAgB,sBAA/B;;IAKN,IAAMC,OAAO,GAAGhB,WAAW,CAACc,WAAD,EAAcH,WAAd,CAA3B;IACA,IAAMM,QAAQ,GAAG,IAAIX,wBAAJ,CAA6Be,EAA7B,EAAiCP,WAAjC,EAA8CE,OAA9C,CAAjB;IACA,OAAO;MAAEC,QAAQ,UAAV;MAAYD,OAAO,SAAnB;MAAqBD,gBAAgB;IAArC,CAAP;EACD,CAdM,MAcA;IACL,MAAM,IAAIS,KAAJ,CACJ,4EAA0Ef,GADtE,CAAN;EAGD;AACF;;AAED,SAASc,uBAAT,GAAgC;EAC9B,OAAOE,iBAAiB,KACpB,UAAChB,GAAD,EAAciB,SAAd,EAAuD;IACrD,WAAI5B,YAAJ,CAAiBW,GAAjB,EAAsBiB,SAAtB,EAAiCN,SAAjC,EAA4CA,SAA5C,EAAuDA,SAAvD,EAAkE;MAChEO,sBAAsB,EAAEpB,sBADwC;MAEhEqB,oBAAoB,EAAErB;IAF0C,CAAlE;EAGE,CALgB,GAMpBsB,SANJ;AAOD;;AAED,SAASJ,iBAAT,GAA0B;EACxB,OACE,OAAOK,OAAP,KAAmB,WAAnB,IACAA,OAAO,IAAI,IADX,IAEAA,OAAO,CAACC,QAAR,IAAoB,IAFpB,IAGAD,OAAO,CAACC,QAAR,CAAiBC,IAAjB,IAAyB,IAJ3B;AAMD;;AAED,SAASb,YAAT,CAAsBV,GAAtB,EAAiC;EAC/B,OAAOA,GAAG,CAACwB,OAAJ,CAAY,eAAZ,KAAgC,CAAvC;AACD","names":["SturdyWebSocket","w3cwebsocket","makePayloadFactory","makeSenders","VERSION","makeHttpSender","makeWebSocketSender","makeAlchemyHttpProvider","makePayloadSender","AlchemyWebSocketProvider","NODE_MAX_WS_FRAME_SIZE","makeAlchemyContext","url","config","makePayload","test","alchemySend","sendPayload","setWriteProvider","senders","provider","protocol","isAlchemyUrl","undefined","ws","wsConstructor","getWebSocketConstructor","Error","isNodeEnvironment","protocols","maxReceivedMessageSize","maxReceivedFrameSize","WebSocket","process","versions","node","indexOf"],"sourceRoot":"","sources":["../../../src/web3-adapter/alchemyContext.ts"],"sourcesContent":["import SturdyWebSocket from \"sturdy-websocket\";\nimport { w3cwebsocket } from \"websocket\";\nimport { FullConfig, Provider } from \"../types\";\nimport {\n  JsonRpcSenders,\n  makePayloadFactory,\n  makeSenders,\n} from \"../util/jsonRpc\";\nimport { VERSION } from \"../version\";\nimport { makeHttpSender } from \"./alchemySendHttp\";\nimport { makeWebSocketSender } from \"./alchemySendWebSocket\";\nimport { makeAlchemyHttpProvider } from \"./httpProvider\";\nimport { makePayloadSender } from \"./sendPayload\";\nimport { AlchemyWebSocketProvider } from \"./webSocketProvider\";\n\nconst NODE_MAX_WS_FRAME_SIZE = 100 * 1024 * 1024; // 100 MB\n\nexport interface AlchemyContext {\n  provider: any;\n  senders: JsonRpcSenders;\n  setWriteProvider(provider: Provider | null | undefined): void;\n}\n\nexport function makeAlchemyContext(\n  url: string,\n  config: FullConfig,\n): AlchemyContext {\n  const makePayload = makePayloadFactory();\n  if (/^https?:\\/\\//.test(url)) {\n    const alchemySend = makeHttpSender(url);\n    const { sendPayload, setWriteProvider } = makePayloadSender(\n      alchemySend,\n      config,\n      makePayload,\n    );\n    const senders = makeSenders(sendPayload, makePayload);\n    const provider = makeAlchemyHttpProvider(sendPayload);\n    return { provider, senders, setWriteProvider };\n  } else if (/^wss?:\\/\\//.test(url)) {\n    const protocol = isAlchemyUrl(url) ? `alchemy-web3-${VERSION}` : undefined;\n    const ws = new SturdyWebSocket(url, protocol, {\n      wsConstructor: getWebSocketConstructor(),\n    });\n    const alchemySend = makeWebSocketSender(ws);\n    const { sendPayload, setWriteProvider } = makePayloadSender(\n      alchemySend,\n      config,\n      makePayload,\n    );\n    const senders = makeSenders(sendPayload, makePayload);\n    const provider = new AlchemyWebSocketProvider(ws, sendPayload, senders);\n    return { provider, senders, setWriteProvider };\n  } else {\n    throw new Error(\n      `Alchemy URL protocol must be one of http, https, ws, or wss. Recieved: ${url}`,\n    );\n  }\n}\n\nfunction getWebSocketConstructor(): any {\n  return isNodeEnvironment()\n    ? (url: string, protocols?: string | string[] | undefined) =>\n        new w3cwebsocket(url, protocols, undefined, undefined, undefined, {\n          maxReceivedMessageSize: NODE_MAX_WS_FRAME_SIZE,\n          maxReceivedFrameSize: NODE_MAX_WS_FRAME_SIZE,\n        })\n    : WebSocket;\n}\n\nfunction isNodeEnvironment(): boolean {\n  return (\n    typeof process !== \"undefined\" &&\n    process != null &&\n    process.versions != null &&\n    process.versions.node != null\n  );\n}\n\nfunction isAlchemyUrl(url: string): boolean {\n  return url.indexOf(\"alchemyapi.io\") >= 0;\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"C:/Users/x7491/Creating-Art-With-NFT-Generator/mintnft/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/x7491/Creating-Art-With-NFT-Generator/mintnft/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { arrayify, concat, hexConcat, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nvar logger = new Logger(version);\nexport function checkResultErrors(result) {\n  // Find the first error (if any)\n  var errors = [];\n\n  var checkErrors = function checkErrors(path, object) {\n    if (!Array.isArray(object)) {\n      return;\n    }\n\n    for (var key in object) {\n      var childPath = path.slice();\n      childPath.push(key);\n\n      try {\n        checkErrors(childPath, object[key]);\n      } catch (error) {\n        errors.push({\n          path: childPath,\n          error: error\n        });\n      }\n    }\n  };\n\n  checkErrors([], result);\n  return errors;\n}\nexport var Coder = /*#__PURE__*/function () {\n  function Coder(name, type, localName, dynamic) {\n    _classCallCheck(this, Coder);\n\n    // @TODO: defineReadOnly these\n    this.name = name;\n    this.type = type;\n    this.localName = localName;\n    this.dynamic = dynamic;\n  }\n\n  _createClass(Coder, [{\n    key: \"_throwError\",\n    value: function _throwError(message, value) {\n      logger.throwArgumentError(message, this.localName, value);\n    }\n  }]);\n\n  return Coder;\n}();\nexport var Writer = /*#__PURE__*/function () {\n  function Writer(wordSize) {\n    _classCallCheck(this, Writer);\n\n    defineReadOnly(this, \"wordSize\", wordSize || 32);\n    this._data = [];\n    this._dataLength = 0;\n    this._padding = new Uint8Array(wordSize);\n  }\n\n  _createClass(Writer, [{\n    key: \"data\",\n    get: function get() {\n      return hexConcat(this._data);\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this._dataLength;\n    }\n  }, {\n    key: \"_writeData\",\n    value: function _writeData(data) {\n      this._data.push(data);\n\n      this._dataLength += data.length;\n      return data.length;\n    }\n  }, {\n    key: \"appendWriter\",\n    value: function appendWriter(writer) {\n      return this._writeData(concat(writer._data));\n    } // Arrayish items; padded on the right to wordSize\n\n  }, {\n    key: \"writeBytes\",\n    value: function writeBytes(value) {\n      var bytes = arrayify(value);\n      var paddingOffset = bytes.length % this.wordSize;\n\n      if (paddingOffset) {\n        bytes = concat([bytes, this._padding.slice(paddingOffset)]);\n      }\n\n      return this._writeData(bytes);\n    }\n  }, {\n    key: \"_getValue\",\n    value: function _getValue(value) {\n      var bytes = arrayify(BigNumber.from(value));\n\n      if (bytes.length > this.wordSize) {\n        logger.throwError(\"value out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n          length: this.wordSize,\n          offset: bytes.length\n        });\n      }\n\n      if (bytes.length % this.wordSize) {\n        bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);\n      }\n\n      return bytes;\n    } // BigNumberish items; padded on the left to wordSize\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      return this._writeData(this._getValue(value));\n    }\n  }, {\n    key: \"writeUpdatableValue\",\n    value: function writeUpdatableValue() {\n      var _this = this;\n\n      var offset = this._data.length;\n\n      this._data.push(this._padding);\n\n      this._dataLength += this.wordSize;\n      return function (value) {\n        _this._data[offset] = _this._getValue(value);\n      };\n    }\n  }]);\n\n  return Writer;\n}();\nexport var Reader = /*#__PURE__*/function () {\n  function Reader(data, wordSize, coerceFunc, allowLoose) {\n    _classCallCheck(this, Reader);\n\n    defineReadOnly(this, \"_data\", arrayify(data));\n    defineReadOnly(this, \"wordSize\", wordSize || 32);\n    defineReadOnly(this, \"_coerceFunc\", coerceFunc);\n    defineReadOnly(this, \"allowLoose\", allowLoose);\n    this._offset = 0;\n  }\n\n  _createClass(Reader, [{\n    key: \"data\",\n    get: function get() {\n      return hexlify(this._data);\n    }\n  }, {\n    key: \"consumed\",\n    get: function get() {\n      return this._offset;\n    } // The default Coerce function\n\n  }, {\n    key: \"coerce\",\n    value: function coerce(name, value) {\n      if (this._coerceFunc) {\n        return this._coerceFunc(name, value);\n      }\n\n      return Reader.coerce(name, value);\n    }\n  }, {\n    key: \"_peekBytes\",\n    value: function _peekBytes(offset, length, loose) {\n      var alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;\n\n      if (this._offset + alignedLength > this._data.length) {\n        if (this.allowLoose && loose && this._offset + length <= this._data.length) {\n          alignedLength = length;\n        } else {\n          logger.throwError(\"data out-of-bounds\", Logger.errors.BUFFER_OVERRUN, {\n            length: this._data.length,\n            offset: this._offset + alignedLength\n          });\n        }\n      }\n\n      return this._data.slice(this._offset, this._offset + alignedLength);\n    }\n  }, {\n    key: \"subReader\",\n    value: function subReader(offset) {\n      return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);\n    }\n  }, {\n    key: \"readBytes\",\n    value: function readBytes(length, loose) {\n      var bytes = this._peekBytes(0, length, !!loose);\n\n      this._offset += bytes.length; // @TODO: Make sure the length..end bytes are all 0?\n\n      return bytes.slice(0, length);\n    }\n  }, {\n    key: \"readValue\",\n    value: function readValue() {\n      return BigNumber.from(this.readBytes(this.wordSize));\n    }\n  }], [{\n    key: \"coerce\",\n    value: function coerce(name, value) {\n      var match = name.match(\"^u?int([0-9]+)$\");\n\n      if (match && parseInt(match[1]) <= 48) {\n        value = value.toNumber();\n      }\n\n      return value;\n    }\n  }]);\n\n  return Reader;\n}();","map":{"version":3,"mappings":"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","names":["arrayify","concat","hexConcat","hexlify","BigNumber","defineReadOnly","Logger","version","logger","checkResultErrors","result","errors","checkErrors","path","object","Array","isArray","key","childPath","slice","push","error","Coder","name","type","localName","dynamic","message","value","throwArgumentError","Writer","wordSize","_data","_dataLength","_padding","Uint8Array","data","length","writer","_writeData","bytes","paddingOffset","from","throwError","BUFFER_OVERRUN","offset","_getValue","Reader","coerceFunc","allowLoose","_offset","_coerceFunc","coerce","loose","alignedLength","Math","ceil","_peekBytes","readBytes","match","parseInt","toNumber"],"sourceRoot":"","sources":["../../src.ts/coders/abstract-coder.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
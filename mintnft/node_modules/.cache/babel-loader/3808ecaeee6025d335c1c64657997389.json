{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nexport function makePayloadFactory() {\n  var nextId = 0;\n  return function (method, params) {\n    return {\n      method: method,\n      params: params,\n      jsonrpc: \"2.0\",\n      id: \"alc-web3:\" + nextId++\n    };\n  };\n}\nexport function makeSenders(sendPayload, makePayload) {\n  var _this = this;\n\n  var send = function (method, params) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var response;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , sendPayload(makePayload(method, params))];\n\n          case 1:\n            response = _a.sent();\n\n            if (response.error) {\n              throw new Error(response.error.message);\n            }\n\n            return [2\n            /*return*/\n            , response.result];\n        }\n      });\n    });\n  };\n\n  function sendBatch(parts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var payload, response, message, errorResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            payload = parts.map(function (_a) {\n              var method = _a.method,\n                  params = _a.params;\n              return makePayload(method, params);\n            });\n            return [4\n            /*yield*/\n            , sendPayload(payload)];\n\n          case 1:\n            response = _a.sent();\n\n            if (!Array.isArray(response)) {\n              message = response.error ? response.error.message : \"Batch request failed\";\n              throw new Error(message);\n            }\n\n            errorResponse = response.find(function (r) {\n              return !!r.error;\n            });\n\n            if (errorResponse) {\n              throw new Error(errorResponse.error.message);\n            } // The ids are ascending numbers because that's what Payload Factories do.\n\n\n            return [2\n            /*return*/\n            , response.sort(function (r1, r2) {\n              return r1.id - r2.id;\n            }).map(function (r) {\n              return r.result;\n            })];\n        }\n      });\n    });\n  }\n\n  return {\n    send: send,\n    sendBatch: sendBatch\n  };\n}\nexport function makeResponse(id, result) {\n  return {\n    jsonrpc: \"2.0\",\n    id: id,\n    result: result\n  };\n}","map":{"version":3,"sources":["../../../src/util/jsonRpc.ts"],"names":[],"mappings":";AAoBA,OAAM,SAAU,kBAAV,GAA4B;AAChC,MAAI,MAAM,GAAG,CAAb;AACA,SAAO,UAAC,MAAD,EAAS,MAAT,EAAe;AAAK,WAAC;AAC1B,MAAA,MAAM,EAAA,MADoB;AAE1B,MAAA,MAAM,EAAA,MAFoB;AAG1B,MAAA,OAAO,EAAE,KAHiB;AAI1B,MAAA,EAAE,EAAE,cAAY,MAAM;AAJI,KAAD;AAKzB,GALF;AAMD;AAED,OAAM,SAAU,WAAV,CACJ,WADI,EAEJ,WAFI,EAEuB;AAF7B,MAAA,KAAA,GAAA,IAAA;;AAIE,MAAM,IAAI,GAAiB,UAAO,MAAP,EAAe,MAAf,EAAqB;AAAA,WAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;AAC7B,mBAAA,CAAA;AAAA;AAAA,cAAM,WAAW,CAAC,WAAW,CAAC,MAAD,EAAS,MAAT,CAAZ,CAAjB,CAAA;;;AAAX,YAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;;AACN,gBAAI,QAAQ,CAAC,KAAb,EAAoB;AAClB,oBAAM,IAAI,KAAJ,CAAU,QAAQ,CAAC,KAAT,CAAe,OAAzB,CAAN;AACD;;AACD,mBAAA,CAAA;AAAA;AAAA,cAAO,QAAQ,CAAC,MAAhB,CAAA;;;KAL8C,CAAA;AAM/C,GAND;;AAQA,WAAe,SAAf,CAAyB,KAAzB,EAA2C;;;;;;AACnC,YAAA,OAAO,GAAG,KAAK,CAAC,GAAN,CAAU,UAAC,EAAD,EAAmB;kBAAhB,MAAM,GAAA,EAAA,CAAA,M;kBAAE,MAAM,GAAA,EAAA,CAAA,M;AACzC,qBAAA,WAAW,CAAC,MAAD,EAAS,MAAT,CAAX;AAA2B,aADb,CAAV;AAGW,mBAAA,CAAA;AAAA;AAAA,cAAM,WAAW,CAAC,OAAD,CAAjB,CAAA;;;AAAX,YAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;;AACN,gBAAI,CAAC,KAAK,CAAC,OAAN,CAAc,QAAd,CAAL,EAA8B;AACtB,cAAA,OAAO,GAAG,QAAQ,CAAC,KAAT,GACZ,QAAQ,CAAC,KAAT,CAAe,OADH,GAEZ,sBAFE;AAGN,oBAAM,IAAI,KAAJ,CAAU,OAAV,CAAN;AACD;;AACK,YAAA,aAAa,GAAG,QAAQ,CAAC,IAAT,CAAc,UAAC,CAAD,EAAE;AAAK,qBAAA,CAAC,CAAC,CAAC,CAAH,KAAA;AAAS,aAA9B,CAAhB;;AACN,gBAAI,aAAJ,EAAmB;AACjB,oBAAM,IAAI,KAAJ,CAAU,aAAa,CAAC,KAAd,CAAqB,OAA/B,CAAN;AACD,a,CACD;;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAO,QAAQ,CACZ,IADI,CACC,UAAC,EAAD,EAAK,EAAL,EAAO;AAAK,qBAAC,EAAE,CAAC,EAAH,GAAoB,EAAE,CAAvB,EAAA;AAAqC,aADlD,EAEJ,GAFI,CAEA,UAAC,CAAD,EAAE;AAAK,qBAAA,CAAC,CAAD,MAAA;AAAQ,aAFf,CAAP,CAAA;;;;AAGD;;AAED,SAAO;AAAE,IAAA,IAAI,EAAA,IAAN;AAAQ,IAAA,SAAS,EAAA;AAAjB,GAAP;AACD;AAED,OAAM,SAAU,YAAV,CAA0B,EAA1B,EAAyC,MAAzC,EAAkD;AACtD,SAAO;AAAE,IAAA,OAAO,EAAE,KAAX;AAAkB,IAAA,EAAE,EAAA,EAApB;AAAsB,IAAA,MAAM,EAAA;AAA5B,GAAP;AACD","sourcesContent":["import {\n  JsonRpcId,\n  JsonRpcRequest,\n  JsonRpcResponse,\n  SendFunction,\n} from \"../types\";\nimport { SendPayloadFunction } from \"../web3-adapter/sendPayload\";\n\nexport type PayloadFactory = (method: string, params?: any[]) => JsonRpcRequest;\n\nexport interface JsonRpcSenders {\n  send: SendFunction;\n  sendBatch(parts: BatchPart[]): Promise<any[]>;\n}\n\nexport interface BatchPart {\n  method: string;\n  params?: any;\n}\n\nexport function makePayloadFactory(): PayloadFactory {\n  let nextId = 0;\n  return (method, params) => ({\n    method,\n    params,\n    jsonrpc: \"2.0\",\n    id: `alc-web3:${nextId++}`,\n  });\n}\n\nexport function makeSenders(\n  sendPayload: SendPayloadFunction,\n  makePayload: PayloadFactory,\n): JsonRpcSenders {\n  const send: SendFunction = async (method, params) => {\n    const response = await sendPayload(makePayload(method, params));\n    if (response.error) {\n      throw new Error(response.error.message);\n    }\n    return response.result;\n  };\n\n  async function sendBatch(parts: BatchPart[]): Promise<any[]> {\n    const payload = parts.map(({ method, params }) =>\n      makePayload(method, params),\n    );\n    const response = await sendPayload(payload);\n    if (!Array.isArray(response)) {\n      const message = response.error\n        ? response.error.message\n        : \"Batch request failed\";\n      throw new Error(message);\n    }\n    const errorResponse = response.find((r) => !!r.error);\n    if (errorResponse) {\n      throw new Error(errorResponse.error!.message);\n    }\n    // The ids are ascending numbers because that's what Payload Factories do.\n    return response\n      .sort((r1, r2) => (r1.id as number) - (r2.id as number))\n      .map((r) => r.result);\n  }\n\n  return { send, sendBatch };\n}\n\nexport function makeResponse<T>(id: JsonRpcId, result: T): JsonRpcResponse<T> {\n  return { jsonrpc: \"2.0\", id, result };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
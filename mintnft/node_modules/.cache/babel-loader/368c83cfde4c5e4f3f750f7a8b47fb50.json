{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"C:/Users/x7491/Creating-Art-With-NFT-Generator/mintnft/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/x7491/Creating-Art-With-NFT-Generator/mintnft/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { EC } from \"./elliptic\";\nimport { arrayify, hexlify, hexZeroPad, splitSignature } from \"@ethersproject/bytes\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nvar _curve = null;\n\nfunction getCurve() {\n  if (!_curve) {\n    _curve = new EC(\"secp256k1\");\n  }\n\n  return _curve;\n}\n\nexport var SigningKey = /*#__PURE__*/function () {\n  function SigningKey(privateKey) {\n    _classCallCheck(this, SigningKey);\n\n    defineReadOnly(this, \"curve\", \"secp256k1\");\n    defineReadOnly(this, \"privateKey\", hexlify(privateKey));\n    var keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n    defineReadOnly(this, \"publicKey\", \"0x\" + keyPair.getPublic(false, \"hex\"));\n    defineReadOnly(this, \"compressedPublicKey\", \"0x\" + keyPair.getPublic(true, \"hex\"));\n    defineReadOnly(this, \"_isSigningKey\", true);\n  }\n\n  _createClass(SigningKey, [{\n    key: \"_addPoint\",\n    value: function _addPoint(other) {\n      var p0 = getCurve().keyFromPublic(arrayify(this.publicKey));\n      var p1 = getCurve().keyFromPublic(arrayify(other));\n      return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n    }\n  }, {\n    key: \"signDigest\",\n    value: function signDigest(digest) {\n      var keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n      var digestBytes = arrayify(digest);\n\n      if (digestBytes.length !== 32) {\n        logger.throwArgumentError(\"bad digest length\", \"digest\", digest);\n      }\n\n      var signature = keyPair.sign(digestBytes, {\n        canonical: true\n      });\n      return splitSignature({\n        recoveryParam: signature.recoveryParam,\n        r: hexZeroPad(\"0x\" + signature.r.toString(16), 32),\n        s: hexZeroPad(\"0x\" + signature.s.toString(16), 32)\n      });\n    }\n  }, {\n    key: \"computeSharedSecret\",\n    value: function computeSharedSecret(otherKey) {\n      var keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));\n      var otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));\n      return hexZeroPad(\"0x\" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n    }\n  }], [{\n    key: \"isSigningKey\",\n    value: function isSigningKey(value) {\n      return !!(value && value._isSigningKey);\n    }\n  }]);\n\n  return SigningKey;\n}();\nexport function recoverPublicKey(digest, signature) {\n  var sig = splitSignature(signature);\n  var rs = {\n    r: arrayify(sig.r),\n    s: arrayify(sig.s)\n  };\n  return \"0x\" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode(\"hex\", false);\n}\nexport function computePublicKey(key, compressed) {\n  var bytes = arrayify(key);\n\n  if (bytes.length === 32) {\n    var signingKey = new SigningKey(bytes);\n\n    if (compressed) {\n      return \"0x\" + getCurve().keyFromPrivate(bytes).getPublic(true, \"hex\");\n    }\n\n    return signingKey.publicKey;\n  } else if (bytes.length === 33) {\n    if (compressed) {\n      return hexlify(bytes);\n    }\n\n    return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(false, \"hex\");\n  } else if (bytes.length === 65) {\n    if (!compressed) {\n      return hexlify(bytes);\n    }\n\n    return \"0x\" + getCurve().keyFromPublic(bytes).getPublic(true, \"hex\");\n  }\n\n  return logger.throwArgumentError(\"invalid public or private key\", \"key\", \"[REDACTED]\");\n}","map":{"version":3,"mappings":"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","names":["EC","arrayify","hexlify","hexZeroPad","splitSignature","defineReadOnly","Logger","version","logger","_curve","getCurve","SigningKey","privateKey","keyPair","keyFromPrivate","getPublic","other","p0","keyFromPublic","publicKey","p1","pub","add","encodeCompressed","digest","digestBytes","length","throwArgumentError","signature","sign","canonical","recoveryParam","r","toString","s","otherKey","otherKeyPair","computePublicKey","derive","value","_isSigningKey","recoverPublicKey","sig","rs","recoverPubKey","encode","key","compressed","bytes","signingKey"],"sourceRoot":"","sources":["../src.ts/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}
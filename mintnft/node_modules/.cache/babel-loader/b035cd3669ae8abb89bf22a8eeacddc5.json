{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport fetchPonyfill from \"fetch-ponyfill\";\nimport { VERSION } from \"../version\";\n\nvar _a = fetchPonyfill(),\n    fetch = _a.fetch,\n    Headers = _a.Headers;\n\nvar ALCHEMY_HEADERS = new Headers({\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\",\n  \"Alchemy-Web3-Version\": VERSION\n});\nvar RATE_LIMIT_STATUS = 429;\nexport function makeHttpSender(url) {\n  var _this = this;\n\n  return function (request) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var response, status, _a;\n\n      var _b, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , fetch(url, {\n              method: \"POST\",\n              headers: ALCHEMY_HEADERS,\n              body: JSON.stringify(request)\n            })];\n\n          case 1:\n            response = _d.sent();\n            status = response.status;\n            _a = status;\n\n            switch (_a) {\n              case 200:\n                return [3\n                /*break*/\n                , 2];\n\n              case RATE_LIMIT_STATUS:\n                return [3\n                /*break*/\n                , 4];\n\n              case 0:\n                return [3\n                /*break*/\n                , 5];\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 2:\n            _b = {\n              type: \"jsonrpc\"\n            };\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 3:\n            return [2\n            /*return*/\n            , (_b.response = _d.sent(), _b)];\n\n          case 4:\n            return [2\n            /*return*/\n            , {\n              type: \"rateLimit\"\n            }];\n\n          case 5:\n            return [2\n            /*return*/\n            , {\n              type: \"networkError\",\n              status: 0,\n              message: \"Connection failed.\"\n            }];\n\n          case 6:\n            _c = {\n              status: status,\n              type: \"networkError\"\n            };\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 7:\n            return [2\n            /*return*/\n            , (_c.message = _d.sent().message, _c)];\n        }\n      });\n    });\n  };\n}","map":{"version":3,"mappings":";AAAA,OAAOA,aAAP,MAA0B,gBAA1B;AACA,SAASC,OAAT,QAAwB,YAAxB;;AAGM,SAAqBD,aAAa,EAAlC;AAAA,IAAEE,KAAK,WAAP;AAAA,IAASC,OAAO,aAAhB;;AAEN,IAAMC,eAAe,GAAG,IAAID,OAAJ,CAAY;EAClCE,MAAM,EAAE,kBAD0B;EAElC,gBAAgB,kBAFkB;EAGlC,wBAAwBJ;AAHU,CAAZ,CAAxB;AAKA,IAAMK,iBAAiB,GAAG,GAA1B;AAEA,OAAM,SAAUC,cAAV,CAAyBC,GAAzB,EAAoC;EAA1C;;EACE,OAAO,UAAMC,OAAN,EAAa;IAAA;;;;;;;;YACD;YAAA;YAAA,EAAMP,KAAK,CAACM,GAAD,EAAM;cAChCE,MAAM,EAAE,MADwB;cAEhCC,OAAO,EAAEP,eAFuB;cAGhCQ,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,OAAf;YAH0B,CAAN,CAAX;;;YAAXM,QAAQ,GAAGC,SAAX;YAKEC,MAAM,GAAKF,QAAQ,OAAnB;YACAG;;;mBACD;gBAAA;gBAAA;gBAAA;;mBAEAZ;gBAAA;gBAAA;gBAAA;;mBAEA;gBAAA;gBAAA;gBAAA;;;;;;;;;cAHMa,IAAI,EAAE;;YAAqB;YAAA;YAAA,EAAMJ,QAAQ,CAACK,IAAT,EAAN;;;YAApC;YAAA;YAAA,GAA0BC,cAAUL,SAAV,EAA+BK,EAAzD;;;YAEA;YAAA;YAAA,EAAO;cAAEF,IAAI,EAAE;YAAR,CAAP;;;YAEA;YAAA;YAAA,EAAO;cACLA,IAAI,EAAE,cADD;cAELF,MAAM,EAAE,CAFH;cAGLK,OAAO,EAAE;YAHJ,CAAP;;;;cAOEL,MAAM;cACNE,IAAI,EAAE;;YACI;YAAA;YAAA,EAAMJ,QAAQ,CAACK,IAAT,EAAN;;;YAHZ;YAAA;YAAA,GAGEG,aAAUP,SAAD,CAAwBM,OAAjC,IAHF;;;KAnBc;EAyBnB,CAzBD;AA0BD","names":["fetchPonyfill","VERSION","fetch","Headers","ALCHEMY_HEADERS","Accept","RATE_LIMIT_STATUS","makeHttpSender","url","request","method","headers","body","JSON","stringify","response","_d","status","_a","type","json","_b","message","_c"],"sourceRoot":"","sources":["../../../src/web3-adapter/alchemySendHttp.ts"],"sourcesContent":["import fetchPonyfill from \"fetch-ponyfill\";\nimport { VERSION } from \"../version\";\nimport { AlchemySendFunction } from \"./alchemySend\";\n\nconst { fetch, Headers } = fetchPonyfill();\n\nconst ALCHEMY_HEADERS = new Headers({\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\",\n  \"Alchemy-Web3-Version\": VERSION,\n});\nconst RATE_LIMIT_STATUS = 429;\n\nexport function makeHttpSender(url: string): AlchemySendFunction {\n  return async request => {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: ALCHEMY_HEADERS,\n      body: JSON.stringify(request),\n    });\n    const { status } = response;\n    switch (status) {\n      case 200:\n        return { type: \"jsonrpc\", response: await response.json() };\n      case RATE_LIMIT_STATUS:\n        return { type: \"rateLimit\" };\n      case 0:\n        return {\n          type: \"networkError\",\n          status: 0,\n          message: \"Connection failed.\",\n        };\n      default:\n        return {\n          status,\n          type: \"networkError\",\n          message: (await response.json()).message,\n        };\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}
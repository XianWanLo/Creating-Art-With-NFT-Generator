{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport fetchPonyfill from \"fetch-ponyfill\";\nimport { VERSION } from \"../version\";\n\nvar _a = fetchPonyfill(),\n    fetch = _a.fetch,\n    Headers = _a.Headers;\n\nvar ALCHEMY_HEADERS = new Headers({\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\",\n  \"Alchemy-Web3-Version\": VERSION\n});\nvar RATE_LIMIT_STATUS = 429;\nexport function makeHttpSender(url) {\n  var _this = this;\n\n  return function (request) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var response, status, _a;\n\n      var _b, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , fetch(url, {\n              method: \"POST\",\n              headers: ALCHEMY_HEADERS,\n              body: JSON.stringify(request)\n            })];\n\n          case 1:\n            response = _d.sent();\n            status = response.status;\n            _a = status;\n\n            switch (_a) {\n              case 200:\n                return [3\n                /*break*/\n                , 2];\n\n              case RATE_LIMIT_STATUS:\n                return [3\n                /*break*/\n                , 4];\n\n              case 0:\n                return [3\n                /*break*/\n                , 5];\n            }\n\n            return [3\n            /*break*/\n            , 6];\n\n          case 2:\n            _b = {\n              type: \"jsonrpc\"\n            };\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 3:\n            return [2\n            /*return*/\n            , (_b.response = _d.sent(), _b)];\n\n          case 4:\n            return [2\n            /*return*/\n            , {\n              type: \"rateLimit\"\n            }];\n\n          case 5:\n            return [2\n            /*return*/\n            , {\n              type: \"networkError\",\n              status: 0,\n              message: \"Connection failed.\"\n            }];\n\n          case 6:\n            _c = {\n              status: status,\n              type: \"networkError\"\n            };\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 7:\n            return [2\n            /*return*/\n            , (_c.message = _d.sent().message, _c)];\n        }\n      });\n    });\n  };\n}","map":{"version":3,"sources":["../../../src/web3-adapter/alchemySendHttp.ts"],"names":[],"mappings":";AAAA,OAAO,aAAP,MAA0B,gBAA1B;AACA,SAAS,OAAT,QAAwB,YAAxB;;AAGM,IAAA,EAAA,GAAqB,aAAa,EAAlC;AAAA,IAAE,KAAK,GAAA,EAAA,CAAA,KAAP;AAAA,IAAS,OAAO,GAAA,EAAA,CAAA,OAAhB;;AAEN,IAAM,eAAe,GAAG,IAAI,OAAJ,CAAY;AAClC,EAAA,MAAM,EAAE,kBAD0B;AAElC,kBAAgB,kBAFkB;AAGlC,0BAAwB;AAHU,CAAZ,CAAxB;AAKA,IAAM,iBAAiB,GAAG,GAA1B;AAEA,OAAM,SAAU,cAAV,CAAyB,GAAzB,EAAoC;AAA1C,MAAA,KAAA,GAAA,IAAA;;AACE,SAAO,UAAM,OAAN,EAAa;AAAA,WAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;;;;;AACD,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,CAAC,GAAD,EAAM;AAChC,cAAA,MAAM,EAAE,MADwB;AAEhC,cAAA,OAAO,EAAE,eAFuB;AAGhC,cAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe,OAAf;AAH0B,aAAN,CAAX,CAAA;;;AAAX,YAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;AAKE,YAAA,MAAM,GAAK,QAAQ,CAAb,MAAN;AACA,YAAA,EAAA,GAAA,MAAA;;;mBACD,G;AAAA,uBAAA,CAAA;AAAA;AAAA,kBAAA,CAAA,CAAA;;mBAEA,iB;AAAA,uBAAA,CAAA;AAAA;AAAA,kBAAA,CAAA,CAAA;;mBAEA,C;AAAA,uBAAA,CAAA;AAAA;AAAA,kBAAA,CAAA,CAAA;;;;;;;;;AAHM,cAAA,IAAI,EAAE;;AAAqB,mBAAA,CAAA;AAAA;AAAA,cAAM,QAAQ,CAAC,IAAT,EAAN,CAAA;;;AAApC,mBAAA,CAAA;AAAA;AAAA,eAA0B,EAAA,CAAA,QAAA,GAAU,EAAA,CAAA,IAAA,EAAV,EAA+B,EAAzD,EAAA;;;AAEA,mBAAA,CAAA;AAAA;AAAA,cAAO;AAAE,cAAA,IAAI,EAAE;AAAR,aAAP,CAAA;;;AAEA,mBAAA,CAAA;AAAA;AAAA,cAAO;AACL,cAAA,IAAI,EAAE,cADD;AAEL,cAAA,MAAM,EAAE,CAFH;AAGL,cAAA,OAAO,EAAE;AAHJ,aAAP,CAAA;;;;AAOE,cAAA,MAAM,EAAA,M;AACN,cAAA,IAAI,EAAE;;AACI,mBAAA,CAAA;AAAA;AAAA,cAAM,QAAQ,CAAC,IAAT,EAAN,CAAA;;;AAHZ,mBAAA,CAAA;AAAA;AAAA,eAGE,EAAA,CAAA,OAAA,GAAU,EAAA,CAAA,IAAA,EAAD,CAAwB,OAAjC,EACA,EAJF,EAAA;;;KAnBc,CAAA;AAyBnB,GAzBD;AA0BD","sourcesContent":["import fetchPonyfill from \"fetch-ponyfill\";\nimport { VERSION } from \"../version\";\nimport { AlchemySendFunction } from \"./alchemySend\";\n\nconst { fetch, Headers } = fetchPonyfill();\n\nconst ALCHEMY_HEADERS = new Headers({\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\",\n  \"Alchemy-Web3-Version\": VERSION,\n});\nconst RATE_LIMIT_STATUS = 429;\n\nexport function makeHttpSender(url: string): AlchemySendFunction {\n  return async request => {\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: ALCHEMY_HEADERS,\n      body: JSON.stringify(request),\n    });\n    const { status } = response;\n    switch (status) {\n      case 200:\n        return { type: \"jsonrpc\", response: await response.json() };\n      case RATE_LIMIT_STATUS:\n        return { type: \"rateLimit\" };\n      case 0:\n        return {\n          type: \"networkError\",\n          status: 0,\n          message: \"Connection failed.\",\n        };\n      default:\n        return {\n          status,\n          type: \"networkError\",\n          message: (await response.json()).message,\n        };\n    }\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}
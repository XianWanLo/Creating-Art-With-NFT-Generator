{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/x7491/Creating-Art-With-NFT-Generator/mintnft/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/x7491/Creating-Art-With-NFT-Generator/mintnft/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{pinJSONToIPFS,pinFileToIPFS}from'./pinata.js';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";require('dotenv').config();var alchemyKey=process.env.REACT_APP_ALCHEMY_KEY;var _require=require(\"@alch/alchemy-web3\"),createAlchemyWeb3=_require.createAlchemyWeb3;var web3=createAlchemyWeb3(alchemyKey);var contractABI=require('../contract-abi.json');var contractAddress=\"0xA10A93F2ec836aF72A720b1F137Afcfe940eA11E\";export var mintNFT=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(image,name,description){var pinataResponse1,metadata,pinataResponse2,tokenURI,transactionParameters,txHash;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return pinFileToIPFS(image);case 2:pinataResponse1=_context.sent;if(pinataResponse1.success){_context.next=5;break;}return _context.abrupt(\"return\",{success:false,status:\"image 😢 Something went wrong while uploading your tokenURI.\"});case 5://2. metadata upload\n//make metadata\nmetadata=new Object();metadata.name=name;metadata.url=pinataResponse1.pinataUrl;;metadata.description=description;//make pinata call\n_context.next=12;return pinJSONToIPFS(metadata);case 12:pinataResponse2=_context.sent;if(pinataResponse2.success){_context.next=15;break;}return _context.abrupt(\"return\",{success:false,status:\"😢 Something went wrong while uploading your tokenURI.\"});case 15:tokenURI=pinataResponse2.pinataUrl;_context.next=18;return new web3.eth.Contract(contractABI,contractAddress);case 18:window.contract=_context.sent;//set up your Ethereum transaction\ntransactionParameters={to:contractAddress,// Required except during contract publications.\nfrom:window.ethereum.selectedAddress,// must match user's active address.\n'data':window.contract.methods.mintNFT(window.ethereum.selectedAddress,tokenURI).encodeABI()//make call to NFT smart contract\n};//sign the transaction via Metamask\n_context.prev=20;_context.next=23;return window.ethereum.request({method:'eth_sendTransaction',params:[transactionParameters]});case 23:txHash=_context.sent;return _context.abrupt(\"return\",{success:true,status:\"✅ Check out your transaction on Etherscan: https://goerli.etherscan.io/tx/\"+txHash});case 27:_context.prev=27;_context.t0=_context[\"catch\"](20);return _context.abrupt(\"return\",{success:false,status:\"😥 Something went wrong: \"+_context.t0.message});case 30:case\"end\":return _context.stop();}}},_callee,null,[[20,27]]);}));return function mintNFT(_x,_x2,_x3){return _ref.apply(this,arguments);};}();export var connectWallet=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var addressArray,obj;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!window.ethereum){_context2.next=14;break;}_context2.prev=1;_context2.next=4;return window.ethereum.request({method:\"eth_requestAccounts\"});case 4:addressArray=_context2.sent;obj={status:\"Write a message in the text-field above.\",address:addressArray[0]};return _context2.abrupt(\"return\",obj);case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](1);return _context2.abrupt(\"return\",{address:\"\",status:\"😥 \"+_context2.t0.message});case 12:_context2.next=15;break;case 14:return _context2.abrupt(\"return\",{address:\"\",status:/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsxs(\"p\",{children:[\" \",\"\\uD83E\\uDD8A\",\" \",/*#__PURE__*/_jsx(\"a\",{target:\"_blank\",href:\"https://metamask.io/download.html\",children:\"You must install Metamask, a virtual Ethereum wallet, in your browser.\"})]})})});case 15:case\"end\":return _context2.stop();}}},_callee2,null,[[1,9]]);}));return function connectWallet(){return _ref2.apply(this,arguments);};}();export var getCurrentWalletConnected=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var addressArray;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!window.ethereum){_context3.next=17;break;}_context3.prev=1;_context3.next=4;return window.ethereum.request({method:\"eth_accounts\"});case 4:addressArray=_context3.sent;if(!(addressArray.length>0)){_context3.next=9;break;}return _context3.abrupt(\"return\",{address:addressArray[0],status:\" \"});case 9:return _context3.abrupt(\"return\",{address:\"\",status:\"Please Connect to Metamask\"});case 10:_context3.next=15;break;case 12:_context3.prev=12;_context3.t0=_context3[\"catch\"](1);return _context3.abrupt(\"return\",{address:\"\",status:\"😥 \"+_context3.t0.message});case 15:_context3.next=18;break;case 17:return _context3.abrupt(\"return\",{address:\"\",status:/*#__PURE__*/_jsx(\"span\",{children:/*#__PURE__*/_jsxs(\"p\",{children:[\" \",\"\\uD83E\\uDD8A\",\" \",/*#__PURE__*/_jsx(\"a\",{target:\"_blank\",href:\"https://metamask.io/download.html\",children:\"You must install Metamask, a virtual Ethereum wallet, in your browser.\"})]})})});case 18:case\"end\":return _context3.stop();}}},_callee3,null,[[1,12]]);}));return function getCurrentWalletConnected(){return _ref3.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/Users/x7491/Creating-Art-With-NFT-Generator/mintnft/src/utils/interact.js"],"names":["pinJSONToIPFS","pinFileToIPFS","require","config","alchemyKey","process","env","REACT_APP_ALCHEMY_KEY","createAlchemyWeb3","web3","contractABI","contractAddress","mintNFT","image","name","description","pinataResponse1","success","status","metadata","Object","url","pinataUrl","pinataResponse2","tokenURI","eth","Contract","window","contract","transactionParameters","to","from","ethereum","selectedAddress","methods","encodeABI","request","method","params","txHash","message","connectWallet","addressArray","obj","address","getCurrentWalletConnected","length"],"mappings":"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","sourcesContent":["import {pinJSONToIPFS, pinFileToIPFS} from './pinata.js'\r\nrequire('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nconst contractABI = require('../contract-abi.json')\r\nconst contractAddress = \"0xA10A93F2ec836aF72A720b1F137Afcfe940eA11E\";\r\n\r\nexport const mintNFT = async(image, name, description) => {\r\n //error handling\r\n// if (url.trim() == \"\" || (name.trim() == \"\" || description.trim() == \"\")) {\r\n//        return {\r\n//            success: false,\r\n//            status: \"❗Please make sure all fields are completed before minting.\",\r\n//        }\r\n//  }\r\n\r\n\r\n  //1. image upload\r\n  //make pinata call\r\n  const pinataResponse1 = await pinFileToIPFS(image)\r\n  if (!pinataResponse1.success) {\r\n    return {\r\n      success: false,\r\n      status: \"image 😢 Something went wrong while uploading your tokenURI.\",\r\n    }\r\n  }\r\n\r\n  //2. metadata upload\r\n  //make metadata\r\n  const metadata = new Object();\r\n  metadata.name = name;\r\n  metadata.url = pinataResponse1.pinataUrl;;\r\n  metadata.description = description;\r\n  //make pinata call\r\n  const pinataResponse2 = await pinJSONToIPFS(metadata);\r\n  if (!pinataResponse2.success) {\r\n      return {\r\n          success: false,\r\n          status: \"😢 Something went wrong while uploading your tokenURI.\",\r\n      }\r\n  }\r\n  const tokenURI = pinataResponse2.pinataUrl;\r\n\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n  //set up your Ethereum transaction\r\n const transactionParameters = {\r\n        to: contractAddress, // Required except during contract publications.\r\n        from: window.ethereum.selectedAddress, // must match user's active address.\r\n        'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI()//make call to NFT smart contract\r\n };\r\n\r\n//sign the transaction via Metamask\r\n try {\r\n    const txHash = await window.ethereum\r\n        .request({\r\n            method: 'eth_sendTransaction',\r\n            params: [transactionParameters],\r\n        });\r\n    return {\r\n        success: true,\r\n        status: \"✅ Check out your transaction on Etherscan: https://goerli.etherscan.io/tx/\" + txHash\r\n    }\r\n } catch (error) {\r\n    return {\r\n        success: false,\r\n        status: \"😥 Something went wrong: \" + error.message\r\n    }\r\n\r\n }\r\n}\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"Write a message in the text-field above.\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \" \",\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"Please Connect to Metamask\",\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}
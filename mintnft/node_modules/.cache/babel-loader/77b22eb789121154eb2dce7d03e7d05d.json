{"ast":null,"code":"// The JSON-RPC types in Web3 definitions aren't quite right. Use these instead.\nexport function isResponse(message) {\n  return Array.isArray(message) || message.jsonrpc === \"2.0\" && message.id !== undefined;\n}\nexport function isSubscriptionEvent(message) {\n  return !isResponse(message);\n}","map":{"version":3,"mappings":"AAAA;AAsCA,OAAM,SAAUA,UAAV,CACJC,OADI,EACqB;EAEzB,OACEC,KAAK,CAACC,OAAN,CAAcF,OAAd,KACCA,OAAO,CAACG,OAAR,KAAoB,KAApB,IAA8BH,OAA2B,CAACI,EAA5B,KAAmCC,SAFpE;AAID;AAED,OAAM,SAAUC,mBAAV,CACJN,OADI,EACqB;EAEzB,OAAO,CAACD,UAAU,CAACC,OAAD,CAAlB;AACD","names":["isResponse","message","Array","isArray","jsonrpc","id","undefined","isSubscriptionEvent"],"sourceRoot":"","sources":["../../src/types.ts"],"sourcesContent":["// The JSON-RPC types in Web3 definitions aren't quite right. Use these instead.\n\nexport type JsonRpcId = string | number | null;\n\nexport interface JsonRpcRequest {\n  jsonrpc: \"2.0\";\n  method: string;\n  params?: any[];\n  id?: JsonRpcId;\n}\n\nexport interface JsonRpcResponse<T = any> {\n  jsonrpc: \"2.0\";\n  result?: T;\n  error?: JsonRpcError;\n  id: JsonRpcId;\n}\n\nexport type SingleOrBatchRequest = JsonRpcRequest | JsonRpcRequest[];\nexport type SingleOrBatchResponse = JsonRpcResponse | JsonRpcResponse[];\n\nexport interface JsonRpcError<T = any> {\n  code: number;\n  message: string;\n  data?: T;\n}\n\nexport interface SubscriptionEvent<T = any> {\n  jsonrpc: \"2.0\";\n  method: \"eth_subscription\";\n  params: {\n    subscription: string;\n    result: T;\n  };\n}\n\nexport type WebSocketMessage = SingleOrBatchResponse | SubscriptionEvent;\n\nexport function isResponse(\n  message: WebSocketMessage,\n): message is SingleOrBatchResponse {\n  return (\n    Array.isArray(message) ||\n    (message.jsonrpc === \"2.0\" && (message as JsonRpcResponse).id !== undefined)\n  );\n}\n\nexport function isSubscriptionEvent(\n  message: WebSocketMessage,\n): message is SubscriptionEvent {\n  return !isResponse(message);\n}\n\nexport interface AlchemyWeb3Config {\n  writeProvider?: Provider | null;\n  maxRetries?: number;\n  retryInterval?: number;\n  retryJitter?: number;\n}\n\nexport type FullConfig = Required<AlchemyWeb3Config>;\n\nexport type Provider =\n  | {\n      sendAsync(payload: any, callback: any): void;\n    }\n  | {\n      send(payload: any, callback: any): void;\n    };\n\nexport interface Eip1193Provider {\n  send(method: string, params?: any[]): Promise<any>;\n}\n\nexport interface LegacyProvider {\n  sendAsync(payload: any, callback: (error: any, result: any) => void): void;\n}\n\nexport type Web3Callback<T> = (error: Error | null, result?: T) => void;\n\nexport type SendFunction = (method: string, params?: any[]) => Promise<any>;\n"]},"metadata":{},"sourceType":"module"}
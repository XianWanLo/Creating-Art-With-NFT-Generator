{"version":3,"sources":["utils/pinata.js","utils/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","key","process","secret","axios","pinFileToIPFS","imageFile","a","data","FormData","append","post","maxBodyLength","headers","_boundary","pinata_api_key","pinata_secret_api_key","then","response","success","pinataUrl","IpfsHash","catch","error","console","log","message","pinJSONToIPFS","JSONBody","web3","createAlchemyWeb3","contractABI","contractAddress","mintNFT","image","name","description","pinataResponse1","status","metadata","Object","url","pinataResponse2","tokenURI","eth","Contract","window","contract","transactionParameters","to","from","ethereum","selectedAddress","methods","encodeABI","request","method","params","txHash","connectWallet","addressArray","obj","address","target","href","getCurrentWalletConnected","length","Minter","props","useState","walletAddress","setWallet","setStatus","setName","setDescription","setImage","useRef","useEffect","on","accounts","connectWalletPressed","walletResponse","onMintPressed","className","id","onClick","String","substring","type","onChange","event","files","required","value","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f8373da.chunk.js","sourcesContent":["require('dotenv').config();\r\nconst key = process.env.REACT_APP_PINATA_KEY;\r\nconst secret = process.env.REACT_APP_PINATA_SECRET;\r\n\r\nconst axios = require('axios');\r\n\r\n//upload file to ipfs\r\nexport const pinFileToIPFS = async(imageFile) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\r\n    let data = new FormData();\r\n    data.append(\"file\", imageFile);\r\n    return axios\r\n//        .post(url, file, {\r\n//            headers: {\r\n//                pinata_api_key: key,\r\n//                pinata_secret_api_key: secret,\r\n//            }\r\n//        })\r\n        .post(url, data, {\r\n            maxBodyLength: 'Infinity',\r\n            headers: {\r\n                'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\r\n                pinata_api_key: key,\r\n                pinata_secret_api_key: secret\r\n            }\r\n        })\r\n        .then(function (response) {\r\n           return {\r\n               success: true,\r\n               pinataUrl: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\r\n           };\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error)\r\n            return {\r\n                success: false,\r\n                message: error.message,\r\n            }\r\n        });\r\n}\r\n\r\nexport const pinJSONToIPFS = async(JSONBody) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n    //making axios POST request to Pinata ⬇️\r\n    return axios\r\n        .post(url, JSONBody, {\r\n            headers: {\r\n                pinata_api_key: key,\r\n                pinata_secret_api_key: secret,\r\n            }\r\n        })\r\n        .then(function (response) {\r\n           return {\r\n               success: true,\r\n               pinataUrl: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\r\n           };\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error)\r\n            return {\r\n                success: false,\r\n                message: error.message,\r\n            }\r\n        });\r\n};","import {pinJSONToIPFS, pinFileToIPFS} from './pinata.js'\r\nrequire('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nconst contractABI = require('../contract-abi.json')\r\nconst contractAddress = \"0xA10A93F2ec836aF72A720b1F137Afcfe940eA11E\";\r\n\r\nexport const mintNFT = async(image, name, description) => {\r\n //error handling\r\n// if (url.trim() == \"\" || (name.trim() == \"\" || description.trim() == \"\")) {\r\n//        return {\r\n//            success: false,\r\n//            status: \"❗Please make sure all fields are completed before minting.\",\r\n//        }\r\n//  }\r\n\r\n\r\n  //1. image upload\r\n  //make pinata call\r\n  const pinataResponse1 = await pinFileToIPFS(image)\r\n  if (!pinataResponse1.success) {\r\n    return {\r\n      success: false,\r\n      status: \"image 😢 Something went wrong while uploading your tokenURI.\",\r\n    }\r\n  }\r\n\r\n  //2. metadata upload\r\n  //make metadata\r\n  const metadata = new Object();\r\n  metadata.name = name;\r\n  metadata.url = pinataResponse1.pinataUrl;;\r\n  metadata.description = description;\r\n  //make pinata call\r\n  const pinataResponse2 = await pinJSONToIPFS(metadata);\r\n  if (!pinataResponse2.success) {\r\n      return {\r\n          success: false,\r\n          status: \"😢 Something went wrong while uploading your tokenURI.\",\r\n      }\r\n  }\r\n  const tokenURI = pinataResponse2.pinataUrl;\r\n\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n  //set up your Ethereum transaction\r\n const transactionParameters = {\r\n        to: contractAddress, // Required except during contract publications.\r\n        from: window.ethereum.selectedAddress, // must match user's active address.\r\n        'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI()//make call to NFT smart contract\r\n };\r\n\r\n//sign the transaction via Metamask\r\n try {\r\n    const txHash = await window.ethereum\r\n        .request({\r\n            method: 'eth_sendTransaction',\r\n            params: [transactionParameters],\r\n        });\r\n    return {\r\n        success: true,\r\n        status: \"✅ Check out your transaction on Etherscan: https://goerli.etherscan.io/tx/\" + txHash\r\n    }\r\n } catch (error) {\r\n    return {\r\n        success: false,\r\n        status: \"😥 Something went wrong: \" + error.message\r\n    }\r\n\r\n }\r\n}\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"Write a message in the text-field above.\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \" \",\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"Please Connect to Metamask\",\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};","import { useEffect, useState, useRef } from \"react\";\r\nimport { connectWallet, getCurrentWalletConnected, mintNFT } from \"./utils/interact.js\";\r\n\r\nconst Minter = (props) => {\r\n\r\n  //State variables\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [image, setImage] = useState(\"\");\r\n  const imageRef = useRef();\r\n\r\n\r\n  function addWalletListener() {\r\n  if (window.ethereum) {\r\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n      if (accounts.length > 0) {\r\n        setWallet(accounts[0]);\r\n        setStatus(\" Write a message in the text-field above.\");\r\n      } else {\r\n        setWallet(\"\");\r\n        setStatus(\" Connect to Metamask.\");\r\n      }\r\n    });\r\n  } else {\r\n    setStatus(\r\n      <p>\r\n        {\" \"}\r\n        🦊{\" \"}\r\n        <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n          You must install Metamask, a virtual Ethereum wallet, in your\r\n          browser.\r\n        </a>\r\n      </p>\r\n    );\r\n  }\r\n}\r\n \r\n    useEffect(async () => {\r\n        const {address, status} = await getCurrentWalletConnected();\r\n        setWallet(address)\r\n        setStatus(status);\r\n        addWalletListener();\r\n    }, []);\r\n\r\n  const connectWalletPressed = async () => {\r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\nconst onMintPressed = async () => {\r\n//    let formData = new FormData()\r\n//    formData.append('file', url.data)\r\n//    const response = await fetch('http://localhost:5000/image', {\r\n//      method: 'POST',\r\n//      body: formData,\r\n//    })\r\n    const { status } = await mintNFT(image, name, description);\r\n    setStatus(status);\r\n};\r\n\r\n  return (\r\n    <div className=\"Minter\">\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <br></br>\r\n      <h1 id=\"title\"> NFT Minter </h1>\r\n      <form>\r\n        <h2>Upload Image: </h2>\r\n        <input type=\"file\" onChange={(event) => setImage(event.target.files[0])} required />\r\n        <h2>The Name of the NFT: </h2>\r\n        <input\r\n          type=\"text\"\r\n          onChange={(event) => setName(event.target.value)}\r\n        />\r\n        <h2>The Description of the NFT: </h2>\r\n        <input\r\n          type=\"text\"\r\n          onChange={(event) => setDescription(event.target.value)}\r\n        />\r\n      </form>\r\n      <button id=\"mintButton\" onClick={onMintPressed}>\r\n        Mint NFT\r\n      </button>\r\n      <p id=\"status\">\r\n        {status}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Minter;\r\n","import './App.css';\r\nimport Minter from './Minter'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Minter></Minter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}
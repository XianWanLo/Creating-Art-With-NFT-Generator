{"version":3,"sources":["utils/pinata.js","utils/interact.js","Minter.js","Displayer.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","key","process","secret","axios","pinFileToIPFS","imageFile","a","data","FormData","append","post","maxBodyLength","headers","_boundary","pinata_api_key","pinata_secret_api_key","then","response","success","pinataUrl","IpfsHash","catch","error","console","log","message","pinJSONToIPFS","JSONBody","web3","createAlchemyWeb3","contractABI","contractAddress","mintNFT","image","name","description","pinataResponse1","status","metadata","Object","url","pinataResponse2","tokenURI","eth","Contract","window","contract","transactionParameters","to","from","ethereum","selectedAddress","methods","encodeABI","request","method","params","NFTname","NFTurl","NFTdescription","connectWallet","addressArray","obj","address","target","href","getCurrentWalletConnected","length","Minter","props","navigate","useNavigate","useState","walletAddress","setWallet","setStatus","setName","setDescription","setImage","useRef","useEffect","on","accounts","connectWalletPressed","walletResponse","onMintPressed","state","className","id","onClick","String","substring","type","onChange","event","files","required","value","Displayer","location","useLocation","src","classname","alt","open","App","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f700a94c.chunk.js","sourcesContent":["require('dotenv').config();\r\nconst key = process.env.REACT_APP_PINATA_KEY;\r\nconst secret = process.env.REACT_APP_PINATA_SECRET;\r\n\r\nconst axios = require('axios');\r\n\r\n//upload file to ipfs\r\nexport const pinFileToIPFS = async(imageFile) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\r\n    let data = new FormData();\r\n    data.append(\"file\", imageFile);\r\n    return axios\r\n        .post(url, data, {\r\n            maxBodyLength: 'Infinity',\r\n            headers: {\r\n                'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\r\n                pinata_api_key: key,\r\n                pinata_secret_api_key: secret\r\n            }\r\n        })\r\n        .then(function (response) {\r\n           return {\r\n               success: true,\r\n               pinataUrl: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\r\n           };\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error)\r\n            return {\r\n                success: false,\r\n                message: error.message,\r\n            }\r\n        });\r\n}\r\n\r\nexport const pinJSONToIPFS = async(JSONBody) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n    //making axios POST request to Pinata ‚¨áÔ∏è\r\n    return axios\r\n        .post(url, JSONBody, {\r\n            headers: {\r\n                pinata_api_key: key,\r\n                pinata_secret_api_key: secret,\r\n            }\r\n        })\r\n        .then(function (response) {\r\n           return {\r\n               success: true,\r\n               pinataUrl: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\r\n           };\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error)\r\n            return {\r\n                success: false,\r\n                message: error.message,\r\n            }\r\n        });\r\n};","import {pinJSONToIPFS, pinFileToIPFS} from './pinata.js'\r\n\r\n//set up Alchemy Web3 endpoint\r\nrequire('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nconst contractABI = require('../contract-abi.json')\r\nconst contractAddress = \"0xA10A93F2ec836aF72A720b1F137Afcfe940eA11E\";\r\n\r\n//receive data from fronted\r\nexport const mintNFT = async(image, name, description) => {\r\n //error handling\r\n// if (url.trim() == \"\" || (name.trim() == \"\" || description.trim() == \"\")) {\r\n//        return {\r\n//            success: false,\r\n//            status: \"‚ùóPlease make sure all fields are completed before minting.\",\r\n//        }\r\n//  }\r\n  //1. image to IPFS\r\n  const pinataResponse1 = await pinFileToIPFS(image)\r\n  if (!pinataResponse1.success) {\r\n    return {\r\n      success: false,\r\n      status: \"üò¢ Something went wrong while uploading your image.\",\r\n    }\r\n  }\r\n\r\n  //2. metadata to IPFS\r\n  const metadata = new Object();\r\n  metadata.name = name;\r\n  metadata.url = pinataResponse1.pinataUrl;;\r\n  metadata.description = description;\r\n\r\n  const pinataResponse2 = await pinJSONToIPFS(metadata);\r\n  if (!pinataResponse2.success) {\r\n      return {\r\n          success: false,\r\n          status: \"üò¢ Something went wrong while uploading your tokenURI.\",\r\n      }\r\n  }\r\n  const tokenURI = pinataResponse2.pinataUrl;\r\n\r\n  //load smart contract\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n  //set up Ethereum transaction\r\n  const transactionParameters = {\r\n          to: contractAddress,\r\n          from: window.ethereum.selectedAddress,\r\n          'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI()//make call to NFT smart contract\r\n  };\r\n\r\n//sign the transaction via Metamask\r\n try {\r\n    const txHash = await window.ethereum\r\n        .request({\r\n            method: 'eth_sendTransaction',\r\n            params: [transactionParameters],\r\n        });\r\n\r\n\r\n    return {\r\n        success: true,\r\n        NFTname: metadata.name,\r\n        NFTurl: metadata.url,\r\n        NFTdescription: metadata.description,\r\n    }\r\n } catch (error) {\r\n    return {\r\n        success: false,\r\n        NFTname: \"None\",\r\n        NFTurl: \"None\",\r\n        NFTdescription: \"None\",\r\n    }\r\n }\r\n\r\n}\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"Write a message in the text-field above.\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"üò• \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            ü¶ä{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \" \",\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"Please Connect to Metamask\",\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"üò• \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            ü¶ä{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};","import { useEffect, useState, useRef } from \"react\";\r\nimport { connectWallet, getCurrentWalletConnected, mintNFT } from \"./utils/interact.js\";\r\nimport { useNavigate} from \"react-router-dom\";\r\n\r\nconst Minter = (props) => {\r\n  const navigate = useNavigate();\r\n\r\n  //State variables\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [image, setImage] = useState(\"\");\r\n  const imageRef = useRef();\r\n\r\n\r\n  function addWalletListener() {\r\n  if (window.ethereum) {\r\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n      if (accounts.length > 0) {\r\n        setWallet(accounts[0]);\r\n        setStatus(\" Write a message in the text-field above.\");\r\n      } else {\r\n        setWallet(\"\");\r\n        setStatus(\" Connect to Metamask.\");\r\n      }\r\n    });\r\n  } else {\r\n    setStatus(\r\n      <p>\r\n        {\" \"}\r\n        ü¶ä{\" \"}\r\n        <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n          You must install Metamask, a virtual Ethereum wallet, in your\r\n          browser.\r\n        </a>\r\n      </p>\r\n    );\r\n  }\r\n}\r\n \r\n  useEffect(async () => {\r\n      const {address, status} = await getCurrentWalletConnected();\r\n      setWallet(address)\r\n      setStatus(status);\r\n      addWalletListener();\r\n  }, []);\r\n\r\n  const connectWalletPressed = async () => {\r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  const onMintPressed = async () => {\r\n\r\n  const { success, NFTname, NFTurl, NFTdescription } = await mintNFT(image, name, description);\r\n  \r\n  if (success) {\r\n      navigate('/display', {\r\n        state: {\r\n          NFTname: NFTname,\r\n          NFTurl: NFTurl,\r\n          NFTdescription: NFTdescription,\r\n        }\r\n      });\r\n  };\r\n  \r\n\r\n  };\r\n\r\n  return (\r\n    <div className=\"Minter\">\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <br></br>\r\n      <h1 id=\"title\"> NFT Minter </h1>\r\n      <form>\r\n        <h2>Upload Image: </h2>\r\n        <input type=\"file\" onChange={(event) => setImage(event.target.files[0])} required />\r\n        <h2>The Name of the NFT: </h2>\r\n        <input\r\n          type=\"text\"\r\n          onChange={(event) => setName(event.target.value)}\r\n        />\r\n        <h2>The Description of the NFT: </h2>\r\n        <input\r\n          type=\"text\"\r\n          onChange={(event) => setDescription(event.target.value)}\r\n        />\r\n      </form>\r\n      <button id=\"mintButton\" onClick={onMintPressed}>\r\n        Mint NFT\r\n      </button>\r\n      <p id=\"status\">\r\n        {status}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Minter;\r\n","import {useLocation} from \"react-router-dom\"\r\n\r\nconst Displayer = () => {\r\n\r\n    const location = useLocation();\r\n\r\n    return (\r\n        <div className=\"Minter\">\r\n        <br></br>\r\n        <h1 id=\"title\"> Fresh Minted NFT! </h1>\r\n        <form>\r\n            <h2>NFT</h2>\r\n            <img src={location.state.NFTurl} classname=\"image\" alt=\"\"/> : <h3>none!</h3>\r\n            <h2>The Name of the NFT:{location.state.NFTname} </h2> : <h2>none!</h2>\r\n            <h2>The Description of the NFT: {location.state.NFTdescription}</h2> : <h2>none!</h2>\r\n            <button onClick={() => window.open('http://afternoon-env.eba-q4ub6hff.us-east-1.elasticbeanstalk.com/', '_blank')} >Click me back to Ai art generator!~</button>\r\n        \r\n        </form>\r\n        </div>\r\n      );\r\n\r\n\r\n\r\n\r\n\r\n\r\n      \r\n};\r\n\r\nexport default Displayer;\r\n","import './App.css';\r\nimport Minter from './Minter'\r\nimport Displayer from './Displayer'\r\nimport {Route, BrowserRouter as Router, Routes} from \"react-router-dom\"\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Routes>\r\n          <Route path=\"/\" element={<Minter />} />\r\n          <Route path=\"display\" element={<Displayer />} />\r\n        </Routes>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}